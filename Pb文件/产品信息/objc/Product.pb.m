// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Product.pb.h"

BOOL ProductPromoTypeIsValidValue(ProductPromoType value) {
  switch (value) {
    case ProductPromoTypeNormal:
    case ProductPromoTypeGroup:
    case ProductPromoTypeRush:
    case ProductPromoTypeFree:
      return YES;
    default:
      return NO;
  }
}

@implementation SearchProductListRequest

- (instancetype) init {
  if ((self = [super init])) {
    _keywords = @"";
    _searchType = @"";
    _orderBy = 0;
    _startIndex = 0;
    _sort = 0;
    _productType = @"";
    _promoId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeywords) {
    [output writeString:1 value:self.keywords];
  }
  if (self.hasSearchType) {
    [output writeString:2 value:self.searchType];
  }
  if (self.hasOrderBy) {
    [output writeInt32:3 value:self.orderBy];
  }
  if (self.hasStartIndex) {
    [output writeInt32:4 value:self.startIndex];
  }
  if (self.hasSort) {
    [output writeInt32:5 value:self.sort];
  }
  if (self.hasProductType) {
    [output writeString:6 value:self.productType];
  }
  if (self.hasPromoId) {
    [output writeString:7 value:self.promoId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasKeywords) {
    size_ += computeStringSize(1, self.keywords);
  }
  if (self.hasSearchType) {
    size_ += computeStringSize(2, self.searchType);
  }
  if (self.hasOrderBy) {
    size_ += computeInt32Size(3, self.orderBy);
  }
  if (self.hasStartIndex) {
    size_ += computeInt32Size(4, self.startIndex);
  }
  if (self.hasSort) {
    size_ += computeInt32Size(5, self.sort);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(6, self.productType);
  }
  if (self.hasPromoId) {
    size_ += computeStringSize(7, self.promoId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchProductListRequest*) parseFromData:(NSData*) data {
  SearchProductListRequest* result = [[SearchProductListRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKeywords) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keywords", self.keywords];
  }
  if (self.hasSearchType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchType", self.searchType];
  }
  if (self.hasOrderBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderBy", [NSNumber numberWithInteger:self.orderBy]];
  }
  if (self.hasStartIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startIndex", [NSNumber numberWithInteger:self.startIndex]];
  }
  if (self.hasSort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sort", [NSNumber numberWithInteger:self.sort]];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasPromoId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"promoId", self.promoId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setKeywords:(NSString*) value {
  _hasKeywords = YES;
  _keywords = value;
}
- (void) setSearchType:(NSString*) value {
  _hasSearchType = YES;
  _searchType = value;
}
- (void) setOrderBy:(SInt32) value {
  _hasOrderBy = YES;
  _orderBy = value;
}
- (void) setStartIndex:(SInt32) value {
  _hasStartIndex = YES;
  _startIndex = value;
}
- (void) setSort:(SInt32) value {
  _hasSort = YES;
  _sort = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setPromoId:(NSString*) value {
  _hasPromoId = YES;
  _promoId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setKeywords:[input readString]];
        break;
      }
      case 18: {
        [self setSearchType:[input readString]];
        break;
      }
      case 24: {
        [self setOrderBy:[input readInt32]];
        break;
      }
      case 32: {
        [self setStartIndex:[input readInt32]];
        break;
      }
      case 40: {
        [self setSort:[input readInt32]];
        break;
      }
      case 50: {
        [self setProductType:[input readString]];
        break;
      }
      case 58: {
        [self setPromoId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation SearchProductListResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _maxIndex = 0;
    _hasMore = NO;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output writeInt32:3 value:self.maxIndex];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasMaxIndex) {
    size_ += computeInt32Size(3, self.maxIndex);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchProductListResult*) parseFromData:(NSData*) data {
  SearchProductListResult* result = [[SearchProductListResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxIndex", [NSNumber numberWithInteger:self.maxIndex]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productLiteInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setMaxIndex:(SInt32) value {
  _hasMaxIndex = YES;
  _maxIndex = value;
}
- (void) setHasMore:(BOOL) value {
  _hasHasMore = YES;
  _hasMore = value;
}
- (void)setProductLiteInfoArray:(NSArray *)array {
  _productLiteInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addProductLiteInfo:(ProductLiteInfo*)value {
  if (_productLiteInfo == nil) {
    _productLiteInfo = [[NSMutableArray alloc]init];
  }
  [_productLiteInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 24: {
        [self setMaxIndex:[input readInt32]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 42: {
        ProductLiteInfo* sub = [[ProductLiteInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addProductLiteInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ProductLiteInfo

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _brand = @"";
    _mainImageUrl = @"";
    _desc = @"";
    _lowestRent = 0;
    _unit = 0;
    _rentCount = 0L;
    _marketPrice = 0;
    _pledgePrice = 0;
    _favorited = NO;
    _productTitle = @"";
    _bannerImageUrl = @"";
    _productPromoType = ProductPromoTypeNormal;
    _validStatus = 0;
    _validStartTime = 0L;
    _validEndTime = 0L;
    _serverTime = 0L;
    _discount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasBrand) {
    [output writeString:3 value:self.brand];
  }
  if (self.hasMainImageUrl) {
    [output writeString:4 value:self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasLowestRent) {
    [output writeDouble:6 value:self.lowestRent];
  }
  if (self.hasUnit) {
    [output writeInt32:7 value:self.unit];
  }
  if (self.hasRentCount) {
    [output writeInt64:8 value:self.rentCount];
  }
  if (self.hasMarketPrice) {
    [output writeDouble:9 value:self.marketPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:10 value:self.pledgePrice];
  }
  if (self.hasFavorited) {
    [output writeBool:11 value:self.favorited];
  }
  if (self.hasProductTitle) {
    [output writeString:12 value:self.productTitle];
  }
  if (self.hasBannerImageUrl) {
    [output writeString:13 value:self.bannerImageUrl];
  }
  if (self.hasProductPromoType) {
    [output writeEnum:14 value:self.productPromoType];
  }
  if (self.hasValidStatus) {
    [output writeInt32:15 value:self.validStatus];
  }
  if (self.hasValidStartTime) {
    [output writeInt64:16 value:self.validStartTime];
  }
  if (self.hasValidEndTime) {
    [output writeInt64:17 value:self.validEndTime];
  }
  if (self.hasServerTime) {
    [output writeInt64:18 value:self.serverTime];
  }
  if (self.hasDiscount) {
    [output writeDouble:19 value:self.discount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(3, self.brand);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(4, self.mainImageUrl);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasLowestRent) {
    size_ += computeDoubleSize(6, self.lowestRent);
  }
  if (self.hasUnit) {
    size_ += computeInt32Size(7, self.unit);
  }
  if (self.hasRentCount) {
    size_ += computeInt64Size(8, self.rentCount);
  }
  if (self.hasMarketPrice) {
    size_ += computeDoubleSize(9, self.marketPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(10, self.pledgePrice);
  }
  if (self.hasFavorited) {
    size_ += computeBoolSize(11, self.favorited);
  }
  if (self.hasProductTitle) {
    size_ += computeStringSize(12, self.productTitle);
  }
  if (self.hasBannerImageUrl) {
    size_ += computeStringSize(13, self.bannerImageUrl);
  }
  if (self.hasProductPromoType) {
    size_ += computeEnumSize(14, self.productPromoType);
  }
  if (self.hasValidStatus) {
    size_ += computeInt32Size(15, self.validStatus);
  }
  if (self.hasValidStartTime) {
    size_ += computeInt64Size(16, self.validStartTime);
  }
  if (self.hasValidEndTime) {
    size_ += computeInt64Size(17, self.validEndTime);
  }
  if (self.hasServerTime) {
    size_ += computeInt64Size(18, self.serverTime);
  }
  if (self.hasDiscount) {
    size_ += computeDoubleSize(19, self.discount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductLiteInfo*) parseFromData:(NSData*) data {
  ProductLiteInfo* result = [[ProductLiteInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasLowestRent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lowestRent", [NSNumber numberWithDouble:self.lowestRent]];
  }
  if (self.hasUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unit", [NSNumber numberWithInteger:self.unit]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithLongLong:self.rentCount]];
  }
  if (self.hasMarketPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketPrice", [NSNumber numberWithDouble:self.marketPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasFavorited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"favorited", [NSNumber numberWithBool:self.favorited]];
  }
  if (self.hasProductTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productTitle", self.productTitle];
  }
  if (self.hasBannerImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerImageUrl", self.bannerImageUrl];
  }
  if (self.hasProductPromoType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"productPromoType", (int)self.productPromoType];
  }
  if (self.hasValidStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStatus", [NSNumber numberWithInteger:self.validStatus]];
  }
  if (self.hasValidStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStartTime", [NSNumber numberWithLongLong:self.validStartTime]];
  }
  if (self.hasValidEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validEndTime", [NSNumber numberWithLongLong:self.validEndTime]];
  }
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithLongLong:self.serverTime]];
  }
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setLowestRent:(Float64) value {
  _hasLowestRent = YES;
  _lowestRent = value;
}
- (void) setUnit:(SInt32) value {
  _hasUnit = YES;
  _unit = value;
}
- (void) setRentCount:(SInt64) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setMarketPrice:(Float64) value {
  _hasMarketPrice = YES;
  _marketPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setFavorited:(BOOL) value {
  _hasFavorited = YES;
  _favorited = value;
}
- (void) setProductTitle:(NSString*) value {
  _hasProductTitle = YES;
  _productTitle = value;
}
- (void) setBannerImageUrl:(NSString*) value {
  _hasBannerImageUrl = YES;
  _bannerImageUrl = value;
}
- (void) setProductPromoType:(ProductPromoType) value {
  _hasProductPromoType = YES;
  _productPromoType = value;
}
- (void) setValidStatus:(SInt32) value {
  _hasValidStatus = YES;
  _validStatus = value;
}
- (void) setValidStartTime:(SInt64) value {
  _hasValidStartTime = YES;
  _validStartTime = value;
}
- (void) setValidEndTime:(SInt64) value {
  _hasValidEndTime = YES;
  _validEndTime = value;
}
- (void) setServerTime:(SInt64) value {
  _hasServerTime = YES;
  _serverTime = value;
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 26: {
        [self setBrand:[input readString]];
        break;
      }
      case 34: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 49: {
        [self setLowestRent:[input readDouble]];
        break;
      }
      case 56: {
        [self setUnit:[input readInt32]];
        break;
      }
      case 64: {
        [self setRentCount:[input readInt64]];
        break;
      }
      case 73: {
        [self setMarketPrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 88: {
        [self setFavorited:[input readBool]];
        break;
      }
      case 98: {
        [self setProductTitle:[input readString]];
        break;
      }
      case 106: {
        [self setBannerImageUrl:[input readString]];
        break;
      }
      case 112: {
        ProductPromoType value = (ProductPromoType)[input readEnum];
        if (ProductPromoTypeIsValidValue(value)) {
          [self setProductPromoType:value];
        } else {
          [unknownFields_ mergeVarintField:14 value:value];
        }
        break;
      }
      case 120: {
        [self setValidStatus:[input readInt32]];
        break;
      }
      case 128: {
        [self setValidStartTime:[input readInt64]];
        break;
      }
      case 136: {
        [self setValidEndTime:[input readInt64]];
        break;
      }
      case 144: {
        [self setServerTime:[input readInt64]];
        break;
      }
      case 153: {
        [self setDiscount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailRequest*) parseFromData:(NSData*) data {
  ProductDetailRequest* result = [[ProductDetailRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasProductDetailInfo) {
    [output writeMessage:3 value:self.productDetailInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasProductDetailInfo) {
    size_ += computeMessageSize(3, self.productDetailInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailResult*) parseFromData:(NSData*) data {
  ProductDetailResult* result = [[ProductDetailResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasProductDetailInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"productDetailInfo"];
    [self.productDetailInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setProductDetailInfo:(ProductDetailInfo*) value {
  _hasProductDetailInfo = YES;
  _productDetailInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        ProductDetailInfo* sub = [[ProductDetailInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setProductDetailInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailInfo

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _brand = @"";
    _desc = @"";
    _ageBracket = @"";
    _lowestRent = 0;
    _unit = 0;
    _rentCount = 0L;
    _maxAvailable = 0L;
    _marketPrice = 0;
    _pledgePrice = 0;
    _transportationPrice = 0;
    _location = @"";
    _evaluateCount = 0L;
    _favorited = NO;
    _productTitle = @"";
    _bannerImageUrl = @"";
    _productPromoType = ProductPromoTypeNormal;
    _validStatus = 0;
    _validStartTime = 0L;
    _validEndTime = 0L;
    _serverTime = 0L;
    _discount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasBrand) {
    [output writeString:3 value:self.brand];
  }
  [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasAgeBracket) {
    [output writeString:6 value:self.ageBracket];
  }
  if (self.hasLowestRent) {
    [output writeDouble:7 value:self.lowestRent];
  }
  if (self.hasUnit) {
    [output writeInt32:8 value:self.unit];
  }
  if (self.hasRentCount) {
    [output writeInt64:9 value:self.rentCount];
  }
  if (self.hasMaxAvailable) {
    [output writeInt64:10 value:self.maxAvailable];
  }
  if (self.hasMarketPrice) {
    [output writeDouble:11 value:self.marketPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:12 value:self.pledgePrice];
  }
  if (self.hasTransportationPrice) {
    [output writeDouble:13 value:self.transportationPrice];
  }
  if (self.hasLocation) {
    [output writeString:14 value:self.location];
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(CategoryInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:16 value:element];
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:17 value:element];
  }];
  [self.baseParam enumerateObjectsUsingBlock:^(ProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:18 value:element];
  }];
  [self.imageParamUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:19 value:element];
  }];
  if (self.hasEvaluateCount) {
    [output writeInt64:20 value:self.evaluateCount];
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:21 value:element];
  }];
  if (self.hasFavorited) {
    [output writeBool:22 value:self.favorited];
  }
  if (self.hasProductTitle) {
    [output writeString:23 value:self.productTitle];
  }
  if (self.hasBannerImageUrl) {
    [output writeString:24 value:self.bannerImageUrl];
  }
  [self.qualityInfo enumerateObjectsUsingBlock:^(QualityInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:25 value:element];
  }];
  if (self.hasProductPromoType) {
    [output writeEnum:26 value:self.productPromoType];
  }
  if (self.hasValidStatus) {
    [output writeInt32:27 value:self.validStatus];
  }
  if (self.hasValidStartTime) {
    [output writeInt64:28 value:self.validStartTime];
  }
  if (self.hasValidEndTime) {
    [output writeInt64:29 value:self.validEndTime];
  }
  if (self.hasServerTime) {
    [output writeInt64:30 value:self.serverTime];
  }
  if (self.hasDiscount) {
    [output writeDouble:31 value:self.discount];
  }
  [self.rentAmountinfo enumerateObjectsUsingBlock:^(RentAmountinfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:32 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(3, self.brand);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageUrl.count;
    [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasAgeBracket) {
    size_ += computeStringSize(6, self.ageBracket);
  }
  if (self.hasLowestRent) {
    size_ += computeDoubleSize(7, self.lowestRent);
  }
  if (self.hasUnit) {
    size_ += computeInt32Size(8, self.unit);
  }
  if (self.hasRentCount) {
    size_ += computeInt64Size(9, self.rentCount);
  }
  if (self.hasMaxAvailable) {
    size_ += computeInt64Size(10, self.maxAvailable);
  }
  if (self.hasMarketPrice) {
    size_ += computeDoubleSize(11, self.marketPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(12, self.pledgePrice);
  }
  if (self.hasTransportationPrice) {
    size_ += computeDoubleSize(13, self.transportationPrice);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(14, self.location);
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(CategoryInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(16, element);
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(17, element);
  }];
  [self.baseParam enumerateObjectsUsingBlock:^(ProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(18, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageParamUrls.count;
    [self.imageParamUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasEvaluateCount) {
    size_ += computeInt64Size(20, self.evaluateCount);
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(21, element);
  }];
  if (self.hasFavorited) {
    size_ += computeBoolSize(22, self.favorited);
  }
  if (self.hasProductTitle) {
    size_ += computeStringSize(23, self.productTitle);
  }
  if (self.hasBannerImageUrl) {
    size_ += computeStringSize(24, self.bannerImageUrl);
  }
  [self.qualityInfo enumerateObjectsUsingBlock:^(QualityInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(25, element);
  }];
  if (self.hasProductPromoType) {
    size_ += computeEnumSize(26, self.productPromoType);
  }
  if (self.hasValidStatus) {
    size_ += computeInt32Size(27, self.validStatus);
  }
  if (self.hasValidStartTime) {
    size_ += computeInt64Size(28, self.validStartTime);
  }
  if (self.hasValidEndTime) {
    size_ += computeInt64Size(29, self.validEndTime);
  }
  if (self.hasServerTime) {
    size_ += computeInt64Size(30, self.serverTime);
  }
  if (self.hasDiscount) {
    size_ += computeDoubleSize(31, self.discount);
  }
  [self.rentAmountinfo enumerateObjectsUsingBlock:^(RentAmountinfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(32, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailInfo*) parseFromData:(NSData*) data {
  ProductDetailInfo* result = [[ProductDetailInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  [self.imageUrl enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", obj];
  }];
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasAgeBracket) {
    [output appendFormat:@"%@%@: %@\n", indent, @"ageBracket", self.ageBracket];
  }
  if (self.hasLowestRent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lowestRent", [NSNumber numberWithDouble:self.lowestRent]];
  }
  if (self.hasUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unit", [NSNumber numberWithInteger:self.unit]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithLongLong:self.rentCount]];
  }
  if (self.hasMaxAvailable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAvailable", [NSNumber numberWithLongLong:self.maxAvailable]];
  }
  if (self.hasMarketPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketPrice", [NSNumber numberWithDouble:self.marketPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasTransportationPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationPrice", [NSNumber numberWithDouble:self.transportationPrice]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(CategoryInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"categoryInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"shortRentPeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(RentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"longRentPeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.baseParam enumerateObjectsUsingBlock:^(ProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseParam"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.imageParamUrls enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageParamUrls", obj];
  }];
  if (self.hasEvaluateCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateCount", [NSNumber numberWithLongLong:self.evaluateCount]];
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productEvaluateInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasFavorited) {
    [output appendFormat:@"%@%@: %@\n", indent, @"favorited", [NSNumber numberWithBool:self.favorited]];
  }
  if (self.hasProductTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productTitle", self.productTitle];
  }
  if (self.hasBannerImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerImageUrl", self.bannerImageUrl];
  }
  [self.qualityInfo enumerateObjectsUsingBlock:^(QualityInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"qualityInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasProductPromoType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"productPromoType", (int)self.productPromoType];
  }
  if (self.hasValidStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStatus", [NSNumber numberWithInteger:self.validStatus]];
  }
  if (self.hasValidStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStartTime", [NSNumber numberWithLongLong:self.validStartTime]];
  }
  if (self.hasValidEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validEndTime", [NSNumber numberWithLongLong:self.validEndTime]];
  }
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithLongLong:self.serverTime]];
  }
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  [self.rentAmountinfo enumerateObjectsUsingBlock:^(RentAmountinfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rentAmountinfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void)setImageUrlArray:(NSArray *)array {
  _imageUrl = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageUrl:(NSString*)value {
  if (_imageUrl == nil) {
    _imageUrl = [[NSMutableArray alloc]init];
  }
  [_imageUrl addObject:value];
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setAgeBracket:(NSString*) value {
  _hasAgeBracket = YES;
  _ageBracket = value;
}
- (void) setLowestRent:(Float64) value {
  _hasLowestRent = YES;
  _lowestRent = value;
}
- (void) setUnit:(SInt32) value {
  _hasUnit = YES;
  _unit = value;
}
- (void) setRentCount:(SInt64) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setMaxAvailable:(SInt64) value {
  _hasMaxAvailable = YES;
  _maxAvailable = value;
}
- (void) setMarketPrice:(Float64) value {
  _hasMarketPrice = YES;
  _marketPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setTransportationPrice:(Float64) value {
  _hasTransportationPrice = YES;
  _transportationPrice = value;
}
- (void) setLocation:(NSString*) value {
  _hasLocation = YES;
  _location = value;
}
- (void)setCategoryInfoArray:(NSArray *)array {
  _categoryInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addCategoryInfo:(CategoryInfo*)value {
  if (_categoryInfo == nil) {
    _categoryInfo = [[NSMutableArray alloc]init];
  }
  [_categoryInfo addObject:value];
}
- (void)setShortRentPeriodArray:(NSArray *)array {
  _shortRentPeriod = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addShortRentPeriod:(RentPeriodInfo*)value {
  if (_shortRentPeriod == nil) {
    _shortRentPeriod = [[NSMutableArray alloc]init];
  }
  [_shortRentPeriod addObject:value];
}
- (void)setLongRentPeriodArray:(NSArray *)array {
  _longRentPeriod = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addLongRentPeriod:(RentPeriodInfo*)value {
  if (_longRentPeriod == nil) {
    _longRentPeriod = [[NSMutableArray alloc]init];
  }
  [_longRentPeriod addObject:value];
}
- (void)setBaseParamArray:(NSArray *)array {
  _baseParam = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addBaseParam:(ProductBaseParam*)value {
  if (_baseParam == nil) {
    _baseParam = [[NSMutableArray alloc]init];
  }
  [_baseParam addObject:value];
}
- (void)setImageParamUrlsArray:(NSArray *)array {
  _imageParamUrls = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageParamUrls:(NSString*)value {
  if (_imageParamUrls == nil) {
    _imageParamUrls = [[NSMutableArray alloc]init];
  }
  [_imageParamUrls addObject:value];
}
- (void) setEvaluateCount:(SInt64) value {
  _hasEvaluateCount = YES;
  _evaluateCount = value;
}
- (void)setProductEvaluateInfoArray:(NSArray *)array {
  _productEvaluateInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addProductEvaluateInfo:(ProductEvaluateInfo*)value {
  if (_productEvaluateInfo == nil) {
    _productEvaluateInfo = [[NSMutableArray alloc]init];
  }
  [_productEvaluateInfo addObject:value];
}
- (void) setFavorited:(BOOL) value {
  _hasFavorited = YES;
  _favorited = value;
}
- (void) setProductTitle:(NSString*) value {
  _hasProductTitle = YES;
  _productTitle = value;
}
- (void) setBannerImageUrl:(NSString*) value {
  _hasBannerImageUrl = YES;
  _bannerImageUrl = value;
}
- (void)setQualityInfoArray:(NSArray *)array {
  _qualityInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addQualityInfo:(QualityInfo*)value {
  if (_qualityInfo == nil) {
    _qualityInfo = [[NSMutableArray alloc]init];
  }
  [_qualityInfo addObject:value];
}
- (void) setProductPromoType:(ProductPromoType) value {
  _hasProductPromoType = YES;
  _productPromoType = value;
}
- (void) setValidStatus:(SInt32) value {
  _hasValidStatus = YES;
  _validStatus = value;
}
- (void) setValidStartTime:(SInt64) value {
  _hasValidStartTime = YES;
  _validStartTime = value;
}
- (void) setValidEndTime:(SInt64) value {
  _hasValidEndTime = YES;
  _validEndTime = value;
}
- (void) setServerTime:(SInt64) value {
  _hasServerTime = YES;
  _serverTime = value;
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void)setRentAmountinfoArray:(NSArray *)array {
  _rentAmountinfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addRentAmountinfo:(RentAmountinfo*)value {
  if (_rentAmountinfo == nil) {
    _rentAmountinfo = [[NSMutableArray alloc]init];
  }
  [_rentAmountinfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 26: {
        [self setBrand:[input readString]];
        break;
      }
      case 34: {
        [self addImageUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 50: {
        [self setAgeBracket:[input readString]];
        break;
      }
      case 57: {
        [self setLowestRent:[input readDouble]];
        break;
      }
      case 64: {
        [self setUnit:[input readInt32]];
        break;
      }
      case 72: {
        [self setRentCount:[input readInt64]];
        break;
      }
      case 80: {
        [self setMaxAvailable:[input readInt64]];
        break;
      }
      case 89: {
        [self setMarketPrice:[input readDouble]];
        break;
      }
      case 97: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 105: {
        [self setTransportationPrice:[input readDouble]];
        break;
      }
      case 114: {
        [self setLocation:[input readString]];
        break;
      }
      case 122: {
        CategoryInfo* sub = [[CategoryInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addCategoryInfo:sub];
        break;
      }
      case 130: {
        RentPeriodInfo* sub = [[RentPeriodInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addShortRentPeriod:sub];
        break;
      }
      case 138: {
        RentPeriodInfo* sub = [[RentPeriodInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addLongRentPeriod:sub];
        break;
      }
      case 146: {
        ProductBaseParam* sub = [[ProductBaseParam alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addBaseParam:sub];
        break;
      }
      case 154: {
        [self addImageParamUrls:[input readString]];
        break;
      }
      case 160: {
        [self setEvaluateCount:[input readInt64]];
        break;
      }
      case 170: {
        ProductEvaluateInfo* sub = [[ProductEvaluateInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addProductEvaluateInfo:sub];
        break;
      }
      case 176: {
        [self setFavorited:[input readBool]];
        break;
      }
      case 186: {
        [self setProductTitle:[input readString]];
        break;
      }
      case 194: {
        [self setBannerImageUrl:[input readString]];
        break;
      }
      case 202: {
        QualityInfo* sub = [[QualityInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addQualityInfo:sub];
        break;
      }
      case 208: {
        ProductPromoType value = (ProductPromoType)[input readEnum];
        if (ProductPromoTypeIsValidValue(value)) {
          [self setProductPromoType:value];
        } else {
          [unknownFields_ mergeVarintField:26 value:value];
        }
        break;
      }
      case 216: {
        [self setValidStatus:[input readInt32]];
        break;
      }
      case 224: {
        [self setValidStartTime:[input readInt64]];
        break;
      }
      case 232: {
        [self setValidEndTime:[input readInt64]];
        break;
      }
      case 240: {
        [self setServerTime:[input readInt64]];
        break;
      }
      case 249: {
        [self setDiscount:[input readDouble]];
        break;
      }
      case 258: {
        RentAmountinfo* sub = [[RentAmountinfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addRentAmountinfo:sub];
        break;
      }
    }
  }
}
@end


@implementation CategoryInfo

- (instancetype) init {
  if ((self = [super init])) {
    _categoryCode = @"";
    _categoryName = @"";
    _categoryImgUrl = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategoryCode) {
    [output writeString:1 value:self.categoryCode];
  }
  if (self.hasCategoryName) {
    [output writeString:2 value:self.categoryName];
  }
  if (self.hasCategoryImgUrl) {
    [output writeString:3 value:self.categoryImgUrl];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCategoryCode) {
    size_ += computeStringSize(1, self.categoryCode);
  }
  if (self.hasCategoryName) {
    size_ += computeStringSize(2, self.categoryName);
  }
  if (self.hasCategoryImgUrl) {
    size_ += computeStringSize(3, self.categoryImgUrl);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CategoryInfo*) parseFromData:(NSData*) data {
  CategoryInfo* result = [[CategoryInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasCategoryName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryName", self.categoryName];
  }
  if (self.hasCategoryImgUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryImgUrl", self.categoryImgUrl];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setCategoryName:(NSString*) value {
  _hasCategoryName = YES;
  _categoryName = value;
}
- (void) setCategoryImgUrl:(NSString*) value {
  _hasCategoryImgUrl = YES;
  _categoryImgUrl = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryName:[input readString]];
        break;
      }
      case 26: {
        [self setCategoryImgUrl:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation QualityInfo

- (instancetype) init {
  if ((self = [super init])) {
    _qualityCode = @"";
    _qualityName = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasQualityCode) {
    [output writeString:1 value:self.qualityCode];
  }
  if (self.hasQualityName) {
    [output writeString:2 value:self.qualityName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasQualityCode) {
    size_ += computeStringSize(1, self.qualityCode);
  }
  if (self.hasQualityName) {
    size_ += computeStringSize(2, self.qualityName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (QualityInfo*) parseFromData:(NSData*) data {
  QualityInfo* result = [[QualityInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasQualityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityCode", self.qualityCode];
  }
  if (self.hasQualityName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityName", self.qualityName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setQualityCode:(NSString*) value {
  _hasQualityCode = YES;
  _qualityCode = value;
}
- (void) setQualityName:(NSString*) value {
  _hasQualityName = YES;
  _qualityName = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setQualityCode:[input readString]];
        break;
      }
      case 18: {
        [self setQualityName:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation CategoryQualityInfo

- (instancetype) init {
  if ((self = [super init])) {
    _codeKey = @"";
    _stockCount = 0;
    _pledgePrice = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeKey) {
    [output writeString:1 value:self.codeKey];
  }
  if (self.hasStockCount) {
    [output writeInt32:2 value:self.stockCount];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:3 value:self.pledgePrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCodeKey) {
    size_ += computeStringSize(1, self.codeKey);
  }
  if (self.hasStockCount) {
    size_ += computeInt32Size(2, self.stockCount);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(3, self.pledgePrice);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CategoryQualityInfo*) parseFromData:(NSData*) data {
  CategoryQualityInfo* result = [[CategoryQualityInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCodeKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeKey", self.codeKey];
  }
  if (self.hasStockCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCount", [NSNumber numberWithInteger:self.stockCount]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCodeKey:(NSString*) value {
  _hasCodeKey = YES;
  _codeKey = value;
}
- (void) setStockCount:(SInt32) value {
  _hasStockCount = YES;
  _stockCount = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCodeKey:[input readString]];
        break;
      }
      case 16: {
        [self setStockCount:[input readInt32]];
        break;
      }
      case 25: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation RentPeriodInfo

- (instancetype) init {
  if ((self = [super init])) {
    _rentCode = @"";
    _rentPeriod = @"";
    _rentPeriodName = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRentCode) {
    [output writeString:1 value:self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output writeString:2 value:self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output writeString:3 value:self.rentPeriodName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasRentCode) {
    size_ += computeStringSize(1, self.rentCode);
  }
  if (self.hasRentPeriod) {
    size_ += computeStringSize(2, self.rentPeriod);
  }
  if (self.hasRentPeriodName) {
    size_ += computeStringSize(3, self.rentPeriodName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RentPeriodInfo*) parseFromData:(NSData*) data {
  RentPeriodInfo* result = [[RentPeriodInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriod", self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriodName", self.rentPeriodName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setRentPeriod:(NSString*) value {
  _hasRentPeriod = YES;
  _rentPeriod = value;
}
- (void) setRentPeriodName:(NSString*) value {
  _hasRentPeriodName = YES;
  _rentPeriodName = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setRentCode:[input readString]];
        break;
      }
      case 18: {
        [self setRentPeriod:[input readString]];
        break;
      }
      case 26: {
        [self setRentPeriodName:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation RentAmountinfo

- (instancetype) init {
  if ((self = [super init])) {
    _codeKey = @"";
    _rentAmountPerDay = 0;
    _rentAmountPerMonth = 0;
    _totalRentAmount = 0;
    _originalRentAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeKey) {
    [output writeString:1 value:self.codeKey];
  }
  if (self.hasRentAmountPerDay) {
    [output writeDouble:2 value:self.rentAmountPerDay];
  }
  if (self.hasRentAmountPerMonth) {
    [output writeDouble:3 value:self.rentAmountPerMonth];
  }
  if (self.hasTotalRentAmount) {
    [output writeDouble:4 value:self.totalRentAmount];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:5 value:self.originalRentAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCodeKey) {
    size_ += computeStringSize(1, self.codeKey);
  }
  if (self.hasRentAmountPerDay) {
    size_ += computeDoubleSize(2, self.rentAmountPerDay);
  }
  if (self.hasRentAmountPerMonth) {
    size_ += computeDoubleSize(3, self.rentAmountPerMonth);
  }
  if (self.hasTotalRentAmount) {
    size_ += computeDoubleSize(4, self.totalRentAmount);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(5, self.originalRentAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RentAmountinfo*) parseFromData:(NSData*) data {
  RentAmountinfo* result = [[RentAmountinfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCodeKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeKey", self.codeKey];
  }
  if (self.hasRentAmountPerDay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentAmountPerDay", [NSNumber numberWithDouble:self.rentAmountPerDay]];
  }
  if (self.hasRentAmountPerMonth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentAmountPerMonth", [NSNumber numberWithDouble:self.rentAmountPerMonth]];
  }
  if (self.hasTotalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalRentAmount", [NSNumber numberWithDouble:self.totalRentAmount]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCodeKey:(NSString*) value {
  _hasCodeKey = YES;
  _codeKey = value;
}
- (void) setRentAmountPerDay:(Float64) value {
  _hasRentAmountPerDay = YES;
  _rentAmountPerDay = value;
}
- (void) setRentAmountPerMonth:(Float64) value {
  _hasRentAmountPerMonth = YES;
  _rentAmountPerMonth = value;
}
- (void) setTotalRentAmount:(Float64) value {
  _hasTotalRentAmount = YES;
  _totalRentAmount = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCodeKey:[input readString]];
        break;
      }
      case 17: {
        [self setRentAmountPerDay:[input readDouble]];
        break;
      }
      case 25: {
        [self setRentAmountPerMonth:[input readDouble]];
        break;
      }
      case 33: {
        [self setTotalRentAmount:[input readDouble]];
        break;
      }
      case 41: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation ProductBaseParam

- (instancetype) init {
  if ((self = [super init])) {
    _code = @"";
    _showKey = @"";
    _showValue = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasShowKey) {
    [output writeString:2 value:self.showKey];
  }
  if (self.hasShowValue) {
    [output writeString:3 value:self.showValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCode) {
    size_ += computeStringSize(1, self.code);
  }
  if (self.hasShowKey) {
    size_ += computeStringSize(2, self.showKey);
  }
  if (self.hasShowValue) {
    size_ += computeStringSize(3, self.showValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductBaseParam*) parseFromData:(NSData*) data {
  ProductBaseParam* result = [[ProductBaseParam alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasShowKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showKey", self.showKey];
  }
  if (self.hasShowValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showValue", self.showValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCode:(NSString*) value {
  _hasCode = YES;
  _code = value;
}
- (void) setShowKey:(NSString*) value {
  _hasShowKey = YES;
  _showKey = value;
}
- (void) setShowValue:(NSString*) value {
  _hasShowValue = YES;
  _showValue = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setShowKey:[input readString]];
        break;
      }
      case 26: {
        [self setShowValue:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ProductEvaluateInfo

- (instancetype) init {
  if ((self = [super init])) {
    _time = 0L;
    _userId = @"";
    _userName = @"";
    _headIconUrl = @"";
    _userLevel = 0;
    _rentCategoryName = @"";
    _content = @"";
    _level = 0;
    _evaluateId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasTime) {
    [output writeInt64:1 value:self.time];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasUserName) {
    [output writeString:3 value:self.userName];
  }
  if (self.hasHeadIconUrl) {
    [output writeString:4 value:self.headIconUrl];
  }
  if (self.hasUserLevel) {
    [output writeInt32:5 value:self.userLevel];
  }
  if (self.hasRentCategoryName) {
    [output writeString:6 value:self.rentCategoryName];
  }
  if (self.hasContent) {
    [output writeString:7 value:self.content];
  }
  [self.imageUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  if (self.hasLevel) {
    [output writeInt32:9 value:self.level];
  }
  if (self.hasEvaluateId) {
    [output writeString:10 value:self.evaluateId];
  }
  [self.evaluateReplyInfo enumerateObjectsUsingBlock:^(EvaluateReplyInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasTime) {
    size_ += computeInt64Size(1, self.time);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasUserName) {
    size_ += computeStringSize(3, self.userName);
  }
  if (self.hasHeadIconUrl) {
    size_ += computeStringSize(4, self.headIconUrl);
  }
  if (self.hasUserLevel) {
    size_ += computeInt32Size(5, self.userLevel);
  }
  if (self.hasRentCategoryName) {
    size_ += computeStringSize(6, self.rentCategoryName);
  }
  if (self.hasContent) {
    size_ += computeStringSize(7, self.content);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageUrls.count;
    [self.imageUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasLevel) {
    size_ += computeInt32Size(9, self.level);
  }
  if (self.hasEvaluateId) {
    size_ += computeStringSize(10, self.evaluateId);
  }
  [self.evaluateReplyInfo enumerateObjectsUsingBlock:^(EvaluateReplyInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductEvaluateInfo*) parseFromData:(NSData*) data {
  ProductEvaluateInfo* result = [[ProductEvaluateInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasUserName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userName", self.userName];
  }
  if (self.hasHeadIconUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"headIconUrl", self.headIconUrl];
  }
  if (self.hasUserLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userLevel", [NSNumber numberWithInteger:self.userLevel]];
  }
  if (self.hasRentCategoryName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCategoryName", self.rentCategoryName];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  [self.imageUrls enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrls", obj];
  }];
  if (self.hasLevel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"level", [NSNumber numberWithInteger:self.level]];
  }
  if (self.hasEvaluateId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateId", self.evaluateId];
  }
  [self.evaluateReplyInfo enumerateObjectsUsingBlock:^(EvaluateReplyInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"evaluateReplyInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setTime:(SInt64) value {
  _hasTime = YES;
  _time = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setUserName:(NSString*) value {
  _hasUserName = YES;
  _userName = value;
}
- (void) setHeadIconUrl:(NSString*) value {
  _hasHeadIconUrl = YES;
  _headIconUrl = value;
}
- (void) setUserLevel:(SInt32) value {
  _hasUserLevel = YES;
  _userLevel = value;
}
- (void) setRentCategoryName:(NSString*) value {
  _hasRentCategoryName = YES;
  _rentCategoryName = value;
}
- (void) setContent:(NSString*) value {
  _hasContent = YES;
  _content = value;
}
- (void)setImageUrlsArray:(NSArray *)array {
  _imageUrls = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageUrls:(NSString*)value {
  if (_imageUrls == nil) {
    _imageUrls = [[NSMutableArray alloc]init];
  }
  [_imageUrls addObject:value];
}
- (void) setLevel:(SInt32) value {
  _hasLevel = YES;
  _level = value;
}
- (void) setEvaluateId:(NSString*) value {
  _hasEvaluateId = YES;
  _evaluateId = value;
}
- (void)setEvaluateReplyInfoArray:(NSArray *)array {
  _evaluateReplyInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addEvaluateReplyInfo:(EvaluateReplyInfo*)value {
  if (_evaluateReplyInfo == nil) {
    _evaluateReplyInfo = [[NSMutableArray alloc]init];
  }
  [_evaluateReplyInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 8: {
        [self setTime:[input readInt64]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 26: {
        [self setUserName:[input readString]];
        break;
      }
      case 34: {
        [self setHeadIconUrl:[input readString]];
        break;
      }
      case 40: {
        [self setUserLevel:[input readInt32]];
        break;
      }
      case 50: {
        [self setRentCategoryName:[input readString]];
        break;
      }
      case 58: {
        [self setContent:[input readString]];
        break;
      }
      case 66: {
        [self addImageUrls:[input readString]];
        break;
      }
      case 72: {
        [self setLevel:[input readInt32]];
        break;
      }
      case 82: {
        [self setEvaluateId:[input readString]];
        break;
      }
      case 90: {
        EvaluateReplyInfo* sub = [[EvaluateReplyInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addEvaluateReplyInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation EvaluateReplyInfo

- (instancetype) init {
  if ((self = [super init])) {
    _replyId = @"";
    _content = @"";
    _time = 0L;
    _fromMechant = NO;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReplyId) {
    [output writeString:1 value:self.replyId];
  }
  if (self.hasContent) {
    [output writeString:2 value:self.content];
  }
  if (self.hasTime) {
    [output writeInt64:3 value:self.time];
  }
  if (self.hasFromMechant) {
    [output writeBool:4 value:self.fromMechant];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasReplyId) {
    size_ += computeStringSize(1, self.replyId);
  }
  if (self.hasContent) {
    size_ += computeStringSize(2, self.content);
  }
  if (self.hasTime) {
    size_ += computeInt64Size(3, self.time);
  }
  if (self.hasFromMechant) {
    size_ += computeBoolSize(4, self.fromMechant);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (EvaluateReplyInfo*) parseFromData:(NSData*) data {
  EvaluateReplyInfo* result = [[EvaluateReplyInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReplyId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"replyId", self.replyId];
  }
  if (self.hasContent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"content", self.content];
  }
  if (self.hasTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"time", [NSNumber numberWithLongLong:self.time]];
  }
  if (self.hasFromMechant) {
    [output appendFormat:@"%@%@: %@\n", indent, @"fromMechant", [NSNumber numberWithBool:self.fromMechant]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setReplyId:(NSString*) value {
  _hasReplyId = YES;
  _replyId = value;
}
- (void) setContent:(NSString*) value {
  _hasContent = YES;
  _content = value;
}
- (void) setTime:(SInt64) value {
  _hasTime = YES;
  _time = value;
}
- (void) setFromMechant:(BOOL) value {
  _hasFromMechant = YES;
  _fromMechant = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setReplyId:[input readString]];
        break;
      }
      case 18: {
        [self setContent:[input readString]];
        break;
      }
      case 24: {
        [self setTime:[input readInt64]];
        break;
      }
      case 32: {
        [self setFromMechant:[input readBool]];
        break;
      }
    }
  }
}
@end


@implementation GetProductEvaluateListRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _evaluateType = 0;
    _startIndex = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasEvaluateType) {
    [output writeInt32:2 value:self.evaluateType];
  }
  if (self.hasStartIndex) {
    [output writeInt32:3 value:self.startIndex];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasEvaluateType) {
    size_ += computeInt32Size(2, self.evaluateType);
  }
  if (self.hasStartIndex) {
    size_ += computeInt32Size(3, self.startIndex);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetProductEvaluateListRequest*) parseFromData:(NSData*) data {
  GetProductEvaluateListRequest* result = [[GetProductEvaluateListRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasEvaluateType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateType", [NSNumber numberWithInteger:self.evaluateType]];
  }
  if (self.hasStartIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startIndex", [NSNumber numberWithInteger:self.startIndex]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setEvaluateType:(SInt32) value {
  _hasEvaluateType = YES;
  _evaluateType = value;
}
- (void) setStartIndex:(SInt32) value {
  _hasStartIndex = YES;
  _startIndex = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 16: {
        [self setEvaluateType:[input readInt32]];
        break;
      }
      case 24: {
        [self setStartIndex:[input readInt32]];
        break;
      }
    }
  }
}
@end


@implementation GetProductEvaluateListResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _maxIndex = 0;
    _hasMore = NO;
    _totalCount = 0L;
    _totalImageCount = 0L;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output writeInt32:3 value:self.maxIndex];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  if (self.hasTotalCount) {
    [output writeInt64:5 value:self.totalCount];
  }
  if (self.hasTotalImageCount) {
    [output writeInt64:6 value:self.totalImageCount];
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasMaxIndex) {
    size_ += computeInt32Size(3, self.maxIndex);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  if (self.hasTotalCount) {
    size_ += computeInt64Size(5, self.totalCount);
  }
  if (self.hasTotalImageCount) {
    size_ += computeInt64Size(6, self.totalImageCount);
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetProductEvaluateListResult*) parseFromData:(NSData*) data {
  GetProductEvaluateListResult* result = [[GetProductEvaluateListResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxIndex", [NSNumber numberWithInteger:self.maxIndex]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithLongLong:self.totalCount]];
  }
  if (self.hasTotalImageCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalImageCount", [NSNumber numberWithLongLong:self.totalImageCount]];
  }
  [self.productEvaluateInfo enumerateObjectsUsingBlock:^(ProductEvaluateInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productEvaluateInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setMaxIndex:(SInt32) value {
  _hasMaxIndex = YES;
  _maxIndex = value;
}
- (void) setHasMore:(BOOL) value {
  _hasHasMore = YES;
  _hasMore = value;
}
- (void) setTotalCount:(SInt64) value {
  _hasTotalCount = YES;
  _totalCount = value;
}
- (void) setTotalImageCount:(SInt64) value {
  _hasTotalImageCount = YES;
  _totalImageCount = value;
}
- (void)setProductEvaluateInfoArray:(NSArray *)array {
  _productEvaluateInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addProductEvaluateInfo:(ProductEvaluateInfo*)value {
  if (_productEvaluateInfo == nil) {
    _productEvaluateInfo = [[NSMutableArray alloc]init];
  }
  [_productEvaluateInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 24: {
        [self setMaxIndex:[input readInt32]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 40: {
        [self setTotalCount:[input readInt64]];
        break;
      }
      case 48: {
        [self setTotalImageCount:[input readInt64]];
        break;
      }
      case 58: {
        ProductEvaluateInfo* sub = [[ProductEvaluateInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addProductEvaluateInfo:sub];
        break;
      }
    }
  }
}
@end


