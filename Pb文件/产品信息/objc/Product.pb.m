// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Product.pb.h"

@implementation SearchProductListRequest

- (instancetype) init {
  if ((self = [super init])) {
    _keywords = @"";
    _searchType = @"";
    _orderBy = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeywords) {
    [output writeString:1 value:self.keywords];
  }
  if (self.hasSearchType) {
    [output writeString:2 value:self.searchType];
  }
  if (self.hasOrderBy) {
    [output writeInt32:3 value:self.orderBy];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasKeywords) {
    size_ += computeStringSize(1, self.keywords);
  }
  if (self.hasSearchType) {
    size_ += computeStringSize(2, self.searchType);
  }
  if (self.hasOrderBy) {
    size_ += computeInt32Size(3, self.orderBy);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchProductListRequest*) parseFromData:(NSData*) data {
  SearchProductListRequest* result = [[SearchProductListRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKeywords) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keywords", self.keywords];
  }
  if (self.hasSearchType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"searchType", self.searchType];
  }
  if (self.hasOrderBy) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderBy", [NSNumber numberWithInteger:self.orderBy]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setKeywords:(NSString*) value {
  _hasKeywords = YES;
  _keywords = value;
}
- (void) setSearchType:(NSString*) value {
  _hasSearchType = YES;
  _searchType = value;
}
- (void) setOrderBy:(SInt32) value {
  _hasOrderBy = YES;
  _orderBy = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setKeywords:[input readString]];
        break;
      }
      case 18: {
        [self setSearchType:[input readString]];
        break;
      }
      case 24: {
        [self setOrderBy:[input readInt32]];
        break;
      }
    }
  }
}
@end


@implementation SearchProductListResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchProductListResult*) parseFromData:(NSData*) data {
  SearchProductListResult* result = [[SearchProductListResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.productLiteInfo enumerateObjectsUsingBlock:^(ProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"productLiteInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void)setProductLiteInfoArray:(NSArray *)array {
  _productLiteInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addProductLiteInfo:(ProductLiteInfo*)value {
  if (_productLiteInfo == nil) {
    _productLiteInfo = [[NSMutableArray alloc]init];
  }
  [_productLiteInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        ProductLiteInfo* sub = [[ProductLiteInfo alloc] init];
        [input readAPMessage:sub extensionRegistry:extensionRegistry];
        [self addProductLiteInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ProductLiteInfo

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _brand = @"";
    _mainImageUrl = @"";
    _desc = @"";
    _lowestRent = 0;
    _unit = 0;
    _rentCount = 0L;
    _marketPrice = 0;
    _pledgePrice = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasBrand) {
    [output writeString:3 value:self.brand];
  }
  if (self.hasMainImageUrl) {
    [output writeString:4 value:self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasLowestRent) {
    [output writeDouble:6 value:self.lowestRent];
  }
  if (self.hasUnit) {
    [output writeInt32:7 value:self.unit];
  }
  if (self.hasRentCount) {
    [output writeInt64:8 value:self.rentCount];
  }
  if (self.hasMarketPrice) {
    [output writeDouble:9 value:self.marketPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:10 value:self.pledgePrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(3, self.brand);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(4, self.mainImageUrl);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasLowestRent) {
    size_ += computeDoubleSize(6, self.lowestRent);
  }
  if (self.hasUnit) {
    size_ += computeInt32Size(7, self.unit);
  }
  if (self.hasRentCount) {
    size_ += computeInt64Size(8, self.rentCount);
  }
  if (self.hasMarketPrice) {
    size_ += computeDoubleSize(9, self.marketPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(10, self.pledgePrice);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductLiteInfo*) parseFromData:(NSData*) data {
  ProductLiteInfo* result = [[ProductLiteInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasLowestRent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lowestRent", [NSNumber numberWithDouble:self.lowestRent]];
  }
  if (self.hasUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unit", [NSNumber numberWithInteger:self.unit]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithLongLong:self.rentCount]];
  }
  if (self.hasMarketPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketPrice", [NSNumber numberWithDouble:self.marketPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setLowestRent:(Float64) value {
  _hasLowestRent = YES;
  _lowestRent = value;
}
- (void) setUnit:(SInt32) value {
  _hasUnit = YES;
  _unit = value;
}
- (void) setRentCount:(SInt64) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setMarketPrice:(Float64) value {
  _hasMarketPrice = YES;
  _marketPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 26: {
        [self setBrand:[input readString]];
        break;
      }
      case 34: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 49: {
        [self setLowestRent:[input readDouble]];
        break;
      }
      case 56: {
        [self setUnit:[input readInt32]];
        break;
      }
      case 64: {
        [self setRentCount:[input readInt64]];
        break;
      }
      case 73: {
        [self setMarketPrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailRequest*) parseFromData:(NSData*) data {
  ProductDetailRequest* result = [[ProductDetailRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasProductDetailInfo) {
    [output writeMessage:3 value:self.productDetailInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasProductDetailInfo) {
    size_ += computeMessageSize(3, self.productDetailInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailResult*) parseFromData:(NSData*) data {
  ProductDetailResult* result = [[ProductDetailResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasProductDetailInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"productDetailInfo"];
    [self.productDetailInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setProductDetailInfo:(ProductDetailInfo*) value {
  _hasProductDetailInfo = YES;
  _productDetailInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        ProductDetailInfo* sub = [[ProductDetailInfo alloc] init];
        [input readAPMessage:sub extensionRegistry:extensionRegistry];
        [self setProductDetailInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ProductDetailInfo

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _brand = @"";
    _desc = @"";
    _lowestRent = 0;
    _unit = 0;
    _rentCount = 0L;
    _marketPrice = 0;
    _pledgePrice = 0;
    _transportationPrice = 0;
    _location = @"";
    _stockCount = 0L;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasBrand) {
    [output writeString:3 value:self.brand];
  }
  [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasDesc) {
    [output writeString:5 value:self.desc];
  }
  if (self.hasLowestRent) {
    [output writeDouble:6 value:self.lowestRent];
  }
  if (self.hasUnit) {
    [output writeInt32:7 value:self.unit];
  }
  if (self.hasRentCount) {
    [output writeInt64:8 value:self.rentCount];
  }
  if (self.hasMarketPrice) {
    [output writeDouble:9 value:self.marketPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:10 value:self.pledgePrice];
  }
  if (self.hasTransportationPrice) {
    [output writeDouble:11 value:self.transportationPrice];
  }
  if (self.hasLocation) {
    [output writeString:12 value:self.location];
  }
  if (self.hasStockCount) {
    [output writeInt64:13 value:self.stockCount];
  }
  [self.colorInfo enumerateObjectsUsingBlock:^(ColorInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:14 value:element];
  }];
  [self.rentInfo enumerateObjectsUsingBlock:^(RentInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(3, self.brand);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageUrl.count;
    [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(5, self.desc);
  }
  if (self.hasLowestRent) {
    size_ += computeDoubleSize(6, self.lowestRent);
  }
  if (self.hasUnit) {
    size_ += computeInt32Size(7, self.unit);
  }
  if (self.hasRentCount) {
    size_ += computeInt64Size(8, self.rentCount);
  }
  if (self.hasMarketPrice) {
    size_ += computeDoubleSize(9, self.marketPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(10, self.pledgePrice);
  }
  if (self.hasTransportationPrice) {
    size_ += computeDoubleSize(11, self.transportationPrice);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(12, self.location);
  }
  if (self.hasStockCount) {
    size_ += computeInt64Size(13, self.stockCount);
  }
  [self.colorInfo enumerateObjectsUsingBlock:^(ColorInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(14, element);
  }];
  [self.rentInfo enumerateObjectsUsingBlock:^(RentInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ProductDetailInfo*) parseFromData:(NSData*) data {
  ProductDetailInfo* result = [[ProductDetailInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  [self.imageUrl enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", obj];
  }];
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasLowestRent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lowestRent", [NSNumber numberWithDouble:self.lowestRent]];
  }
  if (self.hasUnit) {
    [output appendFormat:@"%@%@: %@\n", indent, @"unit", [NSNumber numberWithInteger:self.unit]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithLongLong:self.rentCount]];
  }
  if (self.hasMarketPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketPrice", [NSNumber numberWithDouble:self.marketPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasTransportationPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationPrice", [NSNumber numberWithDouble:self.transportationPrice]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  if (self.hasStockCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCount", [NSNumber numberWithLongLong:self.stockCount]];
  }
  [self.colorInfo enumerateObjectsUsingBlock:^(ColorInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"colorInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.rentInfo enumerateObjectsUsingBlock:^(RentInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"rentInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void)setImageUrlArray:(NSArray *)array {
  _imageUrl = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageUrl:(NSString*)value {
  if (_imageUrl == nil) {
    _imageUrl = [[NSMutableArray alloc]init];
  }
  [_imageUrl addObject:value];
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setLowestRent:(Float64) value {
  _hasLowestRent = YES;
  _lowestRent = value;
}
- (void) setUnit:(SInt32) value {
  _hasUnit = YES;
  _unit = value;
}
- (void) setRentCount:(SInt64) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setMarketPrice:(Float64) value {
  _hasMarketPrice = YES;
  _marketPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setTransportationPrice:(Float64) value {
  _hasTransportationPrice = YES;
  _transportationPrice = value;
}
- (void) setLocation:(NSString*) value {
  _hasLocation = YES;
  _location = value;
}
- (void) setStockCount:(SInt64) value {
  _hasStockCount = YES;
  _stockCount = value;
}
- (void)setColorInfoArray:(NSArray *)array {
  _colorInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addColorInfo:(ColorInfo*)value {
  if (_colorInfo == nil) {
    _colorInfo = [[NSMutableArray alloc]init];
  }
  [_colorInfo addObject:value];
}
- (void)setRentInfoArray:(NSArray *)array {
  _rentInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addRentInfo:(RentInfo*)value {
  if (_rentInfo == nil) {
    _rentInfo = [[NSMutableArray alloc]init];
  }
  [_rentInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 26: {
        [self setBrand:[input readString]];
        break;
      }
      case 34: {
        [self addImageUrl:[input readString]];
        break;
      }
      case 42: {
        [self setDesc:[input readString]];
        break;
      }
      case 49: {
        [self setLowestRent:[input readDouble]];
        break;
      }
      case 56: {
        [self setUnit:[input readInt32]];
        break;
      }
      case 64: {
        [self setRentCount:[input readInt64]];
        break;
      }
      case 73: {
        [self setMarketPrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 89: {
        [self setTransportationPrice:[input readDouble]];
        break;
      }
      case 98: {
        [self setLocation:[input readString]];
        break;
      }
      case 104: {
        [self setStockCount:[input readInt64]];
        break;
      }
      case 114: {
        ColorInfo* sub = [[ColorInfo alloc] init];
        [input readAPMessage:sub extensionRegistry:extensionRegistry];
        [self addColorInfo:sub];
        break;
      }
      case 122: {
        RentInfo* sub = [[RentInfo alloc] init];
        [input readAPMessage:sub extensionRegistry:extensionRegistry];
        [self addRentInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ColorInfo

- (instancetype) init {
  if ((self = [super init])) {
    _colorCode = @"";
    _colorName = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasColorCode) {
    [output writeString:1 value:self.colorCode];
  }
  if (self.hasColorName) {
    [output writeString:2 value:self.colorName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasColorCode) {
    size_ += computeStringSize(1, self.colorCode);
  }
  if (self.hasColorName) {
    size_ += computeStringSize(2, self.colorName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ColorInfo*) parseFromData:(NSData*) data {
  ColorInfo* result = [[ColorInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasColorCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"colorCode", self.colorCode];
  }
  if (self.hasColorName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"colorName", self.colorName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setColorCode:(NSString*) value {
  _hasColorCode = YES;
  _colorCode = value;
}
- (void) setColorName:(NSString*) value {
  _hasColorName = YES;
  _colorName = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setColorCode:[input readString]];
        break;
      }
      case 18: {
        [self setColorName:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation RentInfo

- (instancetype) init {
  if ((self = [super init])) {
    _rentCode = @"";
    _rentPeriod = @"";
    _rentPeriodName = @"";
    _rentPrice = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRentCode) {
    [output writeString:1 value:self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output writeString:2 value:self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output writeString:3 value:self.rentPeriodName];
  }
  if (self.hasRentPrice) {
    [output writeString:4 value:self.rentPrice];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasRentCode) {
    size_ += computeStringSize(1, self.rentCode);
  }
  if (self.hasRentPeriod) {
    size_ += computeStringSize(2, self.rentPeriod);
  }
  if (self.hasRentPeriodName) {
    size_ += computeStringSize(3, self.rentPeriodName);
  }
  if (self.hasRentPrice) {
    size_ += computeStringSize(4, self.rentPrice);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (RentInfo*) parseFromData:(NSData*) data {
  RentInfo* result = [[RentInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriod", self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriodName", self.rentPeriodName];
  }
  if (self.hasRentPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPrice", self.rentPrice];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setRentPeriod:(NSString*) value {
  _hasRentPeriod = YES;
  _rentPeriod = value;
}
- (void) setRentPeriodName:(NSString*) value {
  _hasRentPeriodName = YES;
  _rentPeriodName = value;
}
- (void) setRentPrice:(NSString*) value {
  _hasRentPrice = YES;
  _rentPrice = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setRentCode:[input readString]];
        break;
      }
      case 18: {
        [self setRentPeriod:[input readString]];
        break;
      }
      case 26: {
        [self setRentPeriodName:[input readString]];
        break;
      }
      case 34: {
        [self setRentPrice:[input readString]];
        break;
      }
    }
  }
}
@end


