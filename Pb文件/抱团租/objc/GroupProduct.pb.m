// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "GroupProduct.pb.h"

@implementation GetGroupProductListRequest

- (instancetype) init {
  if ((self = [super init])) {
    _startIndex = 0;
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasStartIndex) {
    [output writeInt32:1 value:self.startIndex];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasStartIndex) {
    size_ += computeInt32Size(1, self.startIndex);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetGroupProductListRequest*) parseFromData:(NSData*) data {
  GetGroupProductListRequest* result = [[GetGroupProductListRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasStartIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startIndex", [NSNumber numberWithInteger:self.startIndex]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setStartIndex:(SInt32) value {
  _hasStartIndex = YES;
  _startIndex = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 8: {
        [self setStartIndex:[input readInt32]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetGroupProductListResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _maxIndex = 0;
    _hasMore = NO;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output writeInt32:3 value:self.maxIndex];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  [self.groupProductList enumerateObjectsUsingBlock:^(GroupProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasMaxIndex) {
    size_ += computeInt32Size(3, self.maxIndex);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  [self.groupProductList enumerateObjectsUsingBlock:^(GroupProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetGroupProductListResult*) parseFromData:(NSData*) data {
  GetGroupProductListResult* result = [[GetGroupProductListResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxIndex", [NSNumber numberWithInteger:self.maxIndex]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  [self.groupProductList enumerateObjectsUsingBlock:^(GroupProductLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupProductList"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setMaxIndex:(SInt32) value {
  _hasMaxIndex = YES;
  _maxIndex = value;
}
- (void) setHasMore:(BOOL) value {
  _hasHasMore = YES;
  _hasMore = value;
}
- (void)setGroupProductListArray:(NSArray *)array {
  _groupProductList = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addGroupProductList:(GroupProductLiteInfo*)value {
  if (_groupProductList == nil) {
    _groupProductList = [[NSMutableArray alloc]init];
  }
  [_groupProductList addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 24: {
        [self setMaxIndex:[input readInt32]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 42: {
        GroupProductLiteInfo* sub = [[GroupProductLiteInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addGroupProductList:sub];
        break;
      }
    }
  }
}
@end


@implementation GroupProductLiteInfo

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _promoType = 0;
    _brand = @"";
    _mainImageUrl = @"";
    _bannerImageUrl = @"";
    _title = @"";
    _desc = @"";
    _validStatus = 0;
    _validStartTime = 0L;
    _validEndTime = 0L;
    _serverTime = 0L;
    _minGroupCount = 0L;
    _discount = 0;
    _applyed = NO;
    _applyCount = 0L;
    _lowestRent = 0;
    _originalRentAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasPromoType) {
    [output writeInt32:3 value:self.promoType];
  }
  if (self.hasBrand) {
    [output writeString:4 value:self.brand];
  }
  if (self.hasMainImageUrl) {
    [output writeString:5 value:self.mainImageUrl];
  }
  if (self.hasBannerImageUrl) {
    [output writeString:6 value:self.bannerImageUrl];
  }
  if (self.hasTitle) {
    [output writeString:7 value:self.title];
  }
  if (self.hasDesc) {
    [output writeString:8 value:self.desc];
  }
  if (self.hasValidStatus) {
    [output writeInt32:9 value:self.validStatus];
  }
  if (self.hasValidStartTime) {
    [output writeInt64:10 value:self.validStartTime];
  }
  if (self.hasValidEndTime) {
    [output writeInt64:11 value:self.validEndTime];
  }
  if (self.hasServerTime) {
    [output writeInt64:12 value:self.serverTime];
  }
  if (self.hasMinGroupCount) {
    [output writeInt64:13 value:self.minGroupCount];
  }
  if (self.hasDiscount) {
    [output writeDouble:14 value:self.discount];
  }
  if (self.hasApplyed) {
    [output writeBool:15 value:self.applyed];
  }
  if (self.hasApplyCount) {
    [output writeInt64:16 value:self.applyCount];
  }
  if (self.hasLowestRent) {
    [output writeDouble:17 value:self.lowestRent];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:18 value:self.originalRentAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasPromoType) {
    size_ += computeInt32Size(3, self.promoType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(4, self.brand);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(5, self.mainImageUrl);
  }
  if (self.hasBannerImageUrl) {
    size_ += computeStringSize(6, self.bannerImageUrl);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(7, self.title);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(8, self.desc);
  }
  if (self.hasValidStatus) {
    size_ += computeInt32Size(9, self.validStatus);
  }
  if (self.hasValidStartTime) {
    size_ += computeInt64Size(10, self.validStartTime);
  }
  if (self.hasValidEndTime) {
    size_ += computeInt64Size(11, self.validEndTime);
  }
  if (self.hasServerTime) {
    size_ += computeInt64Size(12, self.serverTime);
  }
  if (self.hasMinGroupCount) {
    size_ += computeInt64Size(13, self.minGroupCount);
  }
  if (self.hasDiscount) {
    size_ += computeDoubleSize(14, self.discount);
  }
  if (self.hasApplyed) {
    size_ += computeBoolSize(15, self.applyed);
  }
  if (self.hasApplyCount) {
    size_ += computeInt64Size(16, self.applyCount);
  }
  if (self.hasLowestRent) {
    size_ += computeDoubleSize(17, self.lowestRent);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(18, self.originalRentAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupProductLiteInfo*) parseFromData:(NSData*) data {
  GroupProductLiteInfo* result = [[GroupProductLiteInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasPromoType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"promoType", [NSNumber numberWithInteger:self.promoType]];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasBannerImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerImageUrl", self.bannerImageUrl];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasValidStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStatus", [NSNumber numberWithInteger:self.validStatus]];
  }
  if (self.hasValidStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStartTime", [NSNumber numberWithLongLong:self.validStartTime]];
  }
  if (self.hasValidEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validEndTime", [NSNumber numberWithLongLong:self.validEndTime]];
  }
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithLongLong:self.serverTime]];
  }
  if (self.hasMinGroupCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minGroupCount", [NSNumber numberWithLongLong:self.minGroupCount]];
  }
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  if (self.hasApplyed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyed", [NSNumber numberWithBool:self.applyed]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithLongLong:self.applyCount]];
  }
  if (self.hasLowestRent) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lowestRent", [NSNumber numberWithDouble:self.lowestRent]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setPromoType:(SInt32) value {
  _hasPromoType = YES;
  _promoType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setBannerImageUrl:(NSString*) value {
  _hasBannerImageUrl = YES;
  _bannerImageUrl = value;
}
- (void) setTitle:(NSString*) value {
  _hasTitle = YES;
  _title = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setValidStatus:(SInt32) value {
  _hasValidStatus = YES;
  _validStatus = value;
}
- (void) setValidStartTime:(SInt64) value {
  _hasValidStartTime = YES;
  _validStartTime = value;
}
- (void) setValidEndTime:(SInt64) value {
  _hasValidEndTime = YES;
  _validEndTime = value;
}
- (void) setServerTime:(SInt64) value {
  _hasServerTime = YES;
  _serverTime = value;
}
- (void) setMinGroupCount:(SInt64) value {
  _hasMinGroupCount = YES;
  _minGroupCount = value;
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void) setApplyed:(BOOL) value {
  _hasApplyed = YES;
  _applyed = value;
}
- (void) setApplyCount:(SInt64) value {
  _hasApplyCount = YES;
  _applyCount = value;
}
- (void) setLowestRent:(Float64) value {
  _hasLowestRent = YES;
  _lowestRent = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 24: {
        [self setPromoType:[input readInt32]];
        break;
      }
      case 34: {
        [self setBrand:[input readString]];
        break;
      }
      case 42: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 50: {
        [self setBannerImageUrl:[input readString]];
        break;
      }
      case 58: {
        [self setTitle:[input readString]];
        break;
      }
      case 66: {
        [self setDesc:[input readString]];
        break;
      }
      case 72: {
        [self setValidStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setValidStartTime:[input readInt64]];
        break;
      }
      case 88: {
        [self setValidEndTime:[input readInt64]];
        break;
      }
      case 96: {
        [self setServerTime:[input readInt64]];
        break;
      }
      case 104: {
        [self setMinGroupCount:[input readInt64]];
        break;
      }
      case 113: {
        [self setDiscount:[input readDouble]];
        break;
      }
      case 120: {
        [self setApplyed:[input readBool]];
        break;
      }
      case 128: {
        [self setApplyCount:[input readInt64]];
        break;
      }
      case 137: {
        [self setLowestRent:[input readDouble]];
        break;
      }
      case 145: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation GetGroupProductDetailRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetGroupProductDetailRequest*) parseFromData:(NSData*) data {
  GetGroupProductDetailRequest* result = [[GetGroupProductDetailRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetGroupProductDetailResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasGroupProductDetail) {
    [output writeMessage:3 value:self.groupProductDetail];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasGroupProductDetail) {
    size_ += computeMessageSize(3, self.groupProductDetail);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetGroupProductDetailResult*) parseFromData:(NSData*) data {
  GetGroupProductDetailResult* result = [[GetGroupProductDetailResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasGroupProductDetail) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupProductDetail"];
    [self.groupProductDetail writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setGroupProductDetail:(GroupProductDetail*) value {
  _hasGroupProductDetail = YES;
  _groupProductDetail = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        GroupProductDetail* sub = [[GroupProductDetail alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setGroupProductDetail:sub];
        break;
      }
    }
  }
}
@end


@implementation GroupProductDetail

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _productType = @"";
    _preferType = 0;
    _brand = @"";
    _mainImageUrl = @"";
    _bannerImageUrl = @"";
    _title = @"";
    _desc = @"";
    _validStatus = 0;
    _validStartTime = 0L;
    _validEndTime = 0L;
    _serverTime = 0L;
    _minGroupCount = 0L;
    _marketPrice = 0;
    _transFee = 0;
    _location = @"";
    _earnestAmount = 0;
    _discount = 0;
    _applyed = NO;
    _applyCount = 0L;
    _maxAvailable = 0L;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasProductType) {
    [output writeString:2 value:self.productType];
  }
  if (self.hasPreferType) {
    [output writeInt32:3 value:self.preferType];
  }
  if (self.hasBrand) {
    [output writeString:4 value:self.brand];
  }
  if (self.hasMainImageUrl) {
    [output writeString:5 value:self.mainImageUrl];
  }
  if (self.hasBannerImageUrl) {
    [output writeString:6 value:self.bannerImageUrl];
  }
  if (self.hasTitle) {
    [output writeString:7 value:self.title];
  }
  if (self.hasDesc) {
    [output writeString:8 value:self.desc];
  }
  if (self.hasValidStatus) {
    [output writeInt32:9 value:self.validStatus];
  }
  if (self.hasValidStartTime) {
    [output writeInt64:10 value:self.validStartTime];
  }
  if (self.hasValidEndTime) {
    [output writeInt64:11 value:self.validEndTime];
  }
  if (self.hasServerTime) {
    [output writeInt64:12 value:self.serverTime];
  }
  if (self.hasMinGroupCount) {
    [output writeInt64:13 value:self.minGroupCount];
  }
  if (self.hasMarketPrice) {
    [output writeDouble:14 value:self.marketPrice];
  }
  if (self.hasTransFee) {
    [output writeDouble:16 value:self.transFee];
  }
  if (self.hasLocation) {
    [output writeString:17 value:self.location];
  }
  [self.baseParam enumerateObjectsUsingBlock:^(GroupProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:18 value:element];
  }];
  [self.imageParamUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:19 value:element];
  }];
  if (self.hasEarnestAmount) {
    [output writeDouble:20 value:self.earnestAmount];
  }
  if (self.hasDiscount) {
    [output writeDouble:21 value:self.discount];
  }
  if (self.hasApplyed) {
    [output writeBool:22 value:self.applyed];
  }
  if (self.hasApplyCount) {
    [output writeInt64:23 value:self.applyCount];
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(GroupProductCategory *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:24 value:element];
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:25 value:element];
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:26 value:element];
  }];
  [self.groupRentAmountInfo enumerateObjectsUsingBlock:^(GroupRentAmountInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:27 value:element];
  }];
  [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:28 value:element];
  }];
  if (self.hasMaxAvailable) {
    [output writeInt64:29 value:self.maxAvailable];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasProductType) {
    size_ += computeStringSize(2, self.productType);
  }
  if (self.hasPreferType) {
    size_ += computeInt32Size(3, self.preferType);
  }
  if (self.hasBrand) {
    size_ += computeStringSize(4, self.brand);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(5, self.mainImageUrl);
  }
  if (self.hasBannerImageUrl) {
    size_ += computeStringSize(6, self.bannerImageUrl);
  }
  if (self.hasTitle) {
    size_ += computeStringSize(7, self.title);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(8, self.desc);
  }
  if (self.hasValidStatus) {
    size_ += computeInt32Size(9, self.validStatus);
  }
  if (self.hasValidStartTime) {
    size_ += computeInt64Size(10, self.validStartTime);
  }
  if (self.hasValidEndTime) {
    size_ += computeInt64Size(11, self.validEndTime);
  }
  if (self.hasServerTime) {
    size_ += computeInt64Size(12, self.serverTime);
  }
  if (self.hasMinGroupCount) {
    size_ += computeInt64Size(13, self.minGroupCount);
  }
  if (self.hasMarketPrice) {
    size_ += computeDoubleSize(14, self.marketPrice);
  }
  if (self.hasTransFee) {
    size_ += computeDoubleSize(16, self.transFee);
  }
  if (self.hasLocation) {
    size_ += computeStringSize(17, self.location);
  }
  [self.baseParam enumerateObjectsUsingBlock:^(GroupProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(18, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageParamUrls.count;
    [self.imageParamUrls enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasEarnestAmount) {
    size_ += computeDoubleSize(20, self.earnestAmount);
  }
  if (self.hasDiscount) {
    size_ += computeDoubleSize(21, self.discount);
  }
  if (self.hasApplyed) {
    size_ += computeBoolSize(22, self.applyed);
  }
  if (self.hasApplyCount) {
    size_ += computeInt64Size(23, self.applyCount);
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(GroupProductCategory *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(24, element);
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(25, element);
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(26, element);
  }];
  [self.groupRentAmountInfo enumerateObjectsUsingBlock:^(GroupRentAmountInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(27, element);
  }];
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.imageUrl.count;
    [self.imageUrl enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasMaxAvailable) {
    size_ += computeInt64Size(29, self.maxAvailable);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupProductDetail*) parseFromData:(NSData*) data {
  GroupProductDetail* result = [[GroupProductDetail alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasProductType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productType", self.productType];
  }
  if (self.hasPreferType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"preferType", [NSNumber numberWithInteger:self.preferType]];
  }
  if (self.hasBrand) {
    [output appendFormat:@"%@%@: %@\n", indent, @"brand", self.brand];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasBannerImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bannerImageUrl", self.bannerImageUrl];
  }
  if (self.hasTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"title", self.title];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasValidStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStatus", [NSNumber numberWithInteger:self.validStatus]];
  }
  if (self.hasValidStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStartTime", [NSNumber numberWithLongLong:self.validStartTime]];
  }
  if (self.hasValidEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validEndTime", [NSNumber numberWithLongLong:self.validEndTime]];
  }
  if (self.hasServerTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"serverTime", [NSNumber numberWithLongLong:self.serverTime]];
  }
  if (self.hasMinGroupCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"minGroupCount", [NSNumber numberWithLongLong:self.minGroupCount]];
  }
  if (self.hasMarketPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"marketPrice", [NSNumber numberWithDouble:self.marketPrice]];
  }
  if (self.hasTransFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transFee", [NSNumber numberWithDouble:self.transFee]];
  }
  if (self.hasLocation) {
    [output appendFormat:@"%@%@: %@\n", indent, @"location", self.location];
  }
  [self.baseParam enumerateObjectsUsingBlock:^(GroupProductBaseParam *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"baseParam"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.imageParamUrls enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageParamUrls", obj];
  }];
  if (self.hasEarnestAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"earnestAmount", [NSNumber numberWithDouble:self.earnestAmount]];
  }
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  if (self.hasApplyed) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyed", [NSNumber numberWithBool:self.applyed]];
  }
  if (self.hasApplyCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyCount", [NSNumber numberWithLongLong:self.applyCount]];
  }
  [self.categoryInfo enumerateObjectsUsingBlock:^(GroupProductCategory *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"categoryInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.shortRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"shortRentPeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.longRentPeriod enumerateObjectsUsingBlock:^(GroupRentPeriodInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"longRentPeriod"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.groupRentAmountInfo enumerateObjectsUsingBlock:^(GroupRentAmountInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"groupRentAmountInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.imageUrl enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imageUrl", obj];
  }];
  if (self.hasMaxAvailable) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxAvailable", [NSNumber numberWithLongLong:self.maxAvailable]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setProductType:(NSString*) value {
  _hasProductType = YES;
  _productType = value;
}
- (void) setPreferType:(SInt32) value {
  _hasPreferType = YES;
  _preferType = value;
}
- (void) setBrand:(NSString*) value {
  _hasBrand = YES;
  _brand = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setBannerImageUrl:(NSString*) value {
  _hasBannerImageUrl = YES;
  _bannerImageUrl = value;
}
- (void) setTitle:(NSString*) value {
  _hasTitle = YES;
  _title = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setValidStatus:(SInt32) value {
  _hasValidStatus = YES;
  _validStatus = value;
}
- (void) setValidStartTime:(SInt64) value {
  _hasValidStartTime = YES;
  _validStartTime = value;
}
- (void) setValidEndTime:(SInt64) value {
  _hasValidEndTime = YES;
  _validEndTime = value;
}
- (void) setServerTime:(SInt64) value {
  _hasServerTime = YES;
  _serverTime = value;
}
- (void) setMinGroupCount:(SInt64) value {
  _hasMinGroupCount = YES;
  _minGroupCount = value;
}
- (void) setMarketPrice:(Float64) value {
  _hasMarketPrice = YES;
  _marketPrice = value;
}
- (void) setTransFee:(Float64) value {
  _hasTransFee = YES;
  _transFee = value;
}
- (void) setLocation:(NSString*) value {
  _hasLocation = YES;
  _location = value;
}
- (void)setBaseParamArray:(NSArray *)array {
  _baseParam = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addBaseParam:(GroupProductBaseParam*)value {
  if (_baseParam == nil) {
    _baseParam = [[NSMutableArray alloc]init];
  }
  [_baseParam addObject:value];
}
- (void)setImageParamUrlsArray:(NSArray *)array {
  _imageParamUrls = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageParamUrls:(NSString*)value {
  if (_imageParamUrls == nil) {
    _imageParamUrls = [[NSMutableArray alloc]init];
  }
  [_imageParamUrls addObject:value];
}
- (void) setEarnestAmount:(Float64) value {
  _hasEarnestAmount = YES;
  _earnestAmount = value;
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void) setApplyed:(BOOL) value {
  _hasApplyed = YES;
  _applyed = value;
}
- (void) setApplyCount:(SInt64) value {
  _hasApplyCount = YES;
  _applyCount = value;
}
- (void)setCategoryInfoArray:(NSArray *)array {
  _categoryInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addCategoryInfo:(GroupProductCategory*)value {
  if (_categoryInfo == nil) {
    _categoryInfo = [[NSMutableArray alloc]init];
  }
  [_categoryInfo addObject:value];
}
- (void)setShortRentPeriodArray:(NSArray *)array {
  _shortRentPeriod = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addShortRentPeriod:(GroupRentPeriodInfo*)value {
  if (_shortRentPeriod == nil) {
    _shortRentPeriod = [[NSMutableArray alloc]init];
  }
  [_shortRentPeriod addObject:value];
}
- (void)setLongRentPeriodArray:(NSArray *)array {
  _longRentPeriod = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addLongRentPeriod:(GroupRentPeriodInfo*)value {
  if (_longRentPeriod == nil) {
    _longRentPeriod = [[NSMutableArray alloc]init];
  }
  [_longRentPeriod addObject:value];
}
- (void)setGroupRentAmountInfoArray:(NSArray *)array {
  _groupRentAmountInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addGroupRentAmountInfo:(GroupRentAmountInfo*)value {
  if (_groupRentAmountInfo == nil) {
    _groupRentAmountInfo = [[NSMutableArray alloc]init];
  }
  [_groupRentAmountInfo addObject:value];
}
- (void)setImageUrlArray:(NSArray *)array {
  _imageUrl = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addImageUrl:(NSString*)value {
  if (_imageUrl == nil) {
    _imageUrl = [[NSMutableArray alloc]init];
  }
  [_imageUrl addObject:value];
}
- (void) setMaxAvailable:(SInt64) value {
  _hasMaxAvailable = YES;
  _maxAvailable = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setProductType:[input readString]];
        break;
      }
      case 24: {
        [self setPreferType:[input readInt32]];
        break;
      }
      case 34: {
        [self setBrand:[input readString]];
        break;
      }
      case 42: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 50: {
        [self setBannerImageUrl:[input readString]];
        break;
      }
      case 58: {
        [self setTitle:[input readString]];
        break;
      }
      case 66: {
        [self setDesc:[input readString]];
        break;
      }
      case 72: {
        [self setValidStatus:[input readInt32]];
        break;
      }
      case 80: {
        [self setValidStartTime:[input readInt64]];
        break;
      }
      case 88: {
        [self setValidEndTime:[input readInt64]];
        break;
      }
      case 96: {
        [self setServerTime:[input readInt64]];
        break;
      }
      case 104: {
        [self setMinGroupCount:[input readInt64]];
        break;
      }
      case 113: {
        [self setMarketPrice:[input readDouble]];
        break;
      }
      case 129: {
        [self setTransFee:[input readDouble]];
        break;
      }
      case 138: {
        [self setLocation:[input readString]];
        break;
      }
      case 146: {
        GroupProductBaseParam* sub = [[GroupProductBaseParam alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addBaseParam:sub];
        break;
      }
      case 154: {
        [self addImageParamUrls:[input readString]];
        break;
      }
      case 161: {
        [self setEarnestAmount:[input readDouble]];
        break;
      }
      case 169: {
        [self setDiscount:[input readDouble]];
        break;
      }
      case 176: {
        [self setApplyed:[input readBool]];
        break;
      }
      case 184: {
        [self setApplyCount:[input readInt64]];
        break;
      }
      case 194: {
        GroupProductCategory* sub = [[GroupProductCategory alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addCategoryInfo:sub];
        break;
      }
      case 202: {
        GroupRentPeriodInfo* sub = [[GroupRentPeriodInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addShortRentPeriod:sub];
        break;
      }
      case 210: {
        GroupRentPeriodInfo* sub = [[GroupRentPeriodInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addLongRentPeriod:sub];
        break;
      }
      case 218: {
        GroupRentAmountInfo* sub = [[GroupRentAmountInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addGroupRentAmountInfo:sub];
        break;
      }
      case 226: {
        [self addImageUrl:[input readString]];
        break;
      }
      case 232: {
        [self setMaxAvailable:[input readInt64]];
        break;
      }
    }
  }
}
@end


@implementation GroupProductCategory

- (instancetype) init {
  if ((self = [super init])) {
    _categoryCode = @"";
    _categoryName = @"";
    _categoryImgUrl = @"";
    _stockCount = 0;
    _pledgeAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCategoryCode) {
    [output writeString:1 value:self.categoryCode];
  }
  if (self.hasCategoryName) {
    [output writeString:2 value:self.categoryName];
  }
  if (self.hasCategoryImgUrl) {
    [output writeString:3 value:self.categoryImgUrl];
  }
  if (self.hasStockCount) {
    [output writeInt32:4 value:self.stockCount];
  }
  if (self.hasPledgeAmount) {
    [output writeDouble:5 value:self.pledgeAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCategoryCode) {
    size_ += computeStringSize(1, self.categoryCode);
  }
  if (self.hasCategoryName) {
    size_ += computeStringSize(2, self.categoryName);
  }
  if (self.hasCategoryImgUrl) {
    size_ += computeStringSize(3, self.categoryImgUrl);
  }
  if (self.hasStockCount) {
    size_ += computeInt32Size(4, self.stockCount);
  }
  if (self.hasPledgeAmount) {
    size_ += computeDoubleSize(5, self.pledgeAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupProductCategory*) parseFromData:(NSData*) data {
  GroupProductCategory* result = [[GroupProductCategory alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasCategoryName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryName", self.categoryName];
  }
  if (self.hasCategoryImgUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryImgUrl", self.categoryImgUrl];
  }
  if (self.hasStockCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"stockCount", [NSNumber numberWithInteger:self.stockCount]];
  }
  if (self.hasPledgeAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgeAmount", [NSNumber numberWithDouble:self.pledgeAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setCategoryName:(NSString*) value {
  _hasCategoryName = YES;
  _categoryName = value;
}
- (void) setCategoryImgUrl:(NSString*) value {
  _hasCategoryImgUrl = YES;
  _categoryImgUrl = value;
}
- (void) setStockCount:(SInt32) value {
  _hasStockCount = YES;
  _stockCount = value;
}
- (void) setPledgeAmount:(Float64) value {
  _hasPledgeAmount = YES;
  _pledgeAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryName:[input readString]];
        break;
      }
      case 26: {
        [self setCategoryImgUrl:[input readString]];
        break;
      }
      case 32: {
        [self setStockCount:[input readInt32]];
        break;
      }
      case 41: {
        [self setPledgeAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation GroupRentPeriodInfo

- (instancetype) init {
  if ((self = [super init])) {
    _rentCode = @"";
    _rentPeriod = @"";
    _rentPeriodName = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasRentCode) {
    [output writeString:1 value:self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output writeString:2 value:self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output writeString:3 value:self.rentPeriodName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasRentCode) {
    size_ += computeStringSize(1, self.rentCode);
  }
  if (self.hasRentPeriod) {
    size_ += computeStringSize(2, self.rentPeriod);
  }
  if (self.hasRentPeriodName) {
    size_ += computeStringSize(3, self.rentPeriodName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupRentPeriodInfo*) parseFromData:(NSData*) data {
  GroupRentPeriodInfo* result = [[GroupRentPeriodInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasRentPeriod) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriod", self.rentPeriod];
  }
  if (self.hasRentPeriodName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPeriodName", self.rentPeriodName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setRentPeriod:(NSString*) value {
  _hasRentPeriod = YES;
  _rentPeriod = value;
}
- (void) setRentPeriodName:(NSString*) value {
  _hasRentPeriodName = YES;
  _rentPeriodName = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setRentCode:[input readString]];
        break;
      }
      case 18: {
        [self setRentPeriod:[input readString]];
        break;
      }
      case 26: {
        [self setRentPeriodName:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GroupRentAmountInfo

- (instancetype) init {
  if ((self = [super init])) {
    _codeKey = @"";
    _rentAmountPerDay = 0;
    _rentAmountPerMonth = 0;
    _totalRentAmount = 0;
    _originalRentAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCodeKey) {
    [output writeString:1 value:self.codeKey];
  }
  if (self.hasRentAmountPerDay) {
    [output writeDouble:2 value:self.rentAmountPerDay];
  }
  if (self.hasRentAmountPerMonth) {
    [output writeDouble:3 value:self.rentAmountPerMonth];
  }
  if (self.hasTotalRentAmount) {
    [output writeDouble:4 value:self.totalRentAmount];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:5 value:self.originalRentAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCodeKey) {
    size_ += computeStringSize(1, self.codeKey);
  }
  if (self.hasRentAmountPerDay) {
    size_ += computeDoubleSize(2, self.rentAmountPerDay);
  }
  if (self.hasRentAmountPerMonth) {
    size_ += computeDoubleSize(3, self.rentAmountPerMonth);
  }
  if (self.hasTotalRentAmount) {
    size_ += computeDoubleSize(4, self.totalRentAmount);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(5, self.originalRentAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupRentAmountInfo*) parseFromData:(NSData*) data {
  GroupRentAmountInfo* result = [[GroupRentAmountInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCodeKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"codeKey", self.codeKey];
  }
  if (self.hasRentAmountPerDay) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentAmountPerDay", [NSNumber numberWithDouble:self.rentAmountPerDay]];
  }
  if (self.hasRentAmountPerMonth) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentAmountPerMonth", [NSNumber numberWithDouble:self.rentAmountPerMonth]];
  }
  if (self.hasTotalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalRentAmount", [NSNumber numberWithDouble:self.totalRentAmount]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCodeKey:(NSString*) value {
  _hasCodeKey = YES;
  _codeKey = value;
}
- (void) setRentAmountPerDay:(Float64) value {
  _hasRentAmountPerDay = YES;
  _rentAmountPerDay = value;
}
- (void) setRentAmountPerMonth:(Float64) value {
  _hasRentAmountPerMonth = YES;
  _rentAmountPerMonth = value;
}
- (void) setTotalRentAmount:(Float64) value {
  _hasTotalRentAmount = YES;
  _totalRentAmount = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCodeKey:[input readString]];
        break;
      }
      case 17: {
        [self setRentAmountPerDay:[input readDouble]];
        break;
      }
      case 25: {
        [self setRentAmountPerMonth:[input readDouble]];
        break;
      }
      case 33: {
        [self setTotalRentAmount:[input readDouble]];
        break;
      }
      case 41: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation GroupProductBaseParam

- (instancetype) init {
  if ((self = [super init])) {
    _code = @"";
    _showKey = @"";
    _showValue = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeString:1 value:self.code];
  }
  if (self.hasShowKey) {
    [output writeString:2 value:self.showKey];
  }
  if (self.hasShowValue) {
    [output writeString:3 value:self.showValue];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasCode) {
    size_ += computeStringSize(1, self.code);
  }
  if (self.hasShowKey) {
    size_ += computeStringSize(2, self.showKey);
  }
  if (self.hasShowValue) {
    size_ += computeStringSize(3, self.showValue);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GroupProductBaseParam*) parseFromData:(NSData*) data {
  GroupProductBaseParam* result = [[GroupProductBaseParam alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"code", self.code];
  }
  if (self.hasShowKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showKey", self.showKey];
  }
  if (self.hasShowValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"showValue", self.showValue];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setCode:(NSString*) value {
  _hasCode = YES;
  _code = value;
}
- (void) setShowKey:(NSString*) value {
  _hasShowKey = YES;
  _showKey = value;
}
- (void) setShowValue:(NSString*) value {
  _hasShowValue = YES;
  _showValue = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setCode:[input readString]];
        break;
      }
      case 18: {
        [self setShowKey:[input readString]];
        break;
      }
      case 26: {
        [self setShowValue:[input readString]];
        break;
      }
    }
  }
}
@end


