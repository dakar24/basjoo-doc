// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Order.pb.h"

BOOL PayStatusQueryTypeIsValidValue(PayStatusQueryType value) {
  switch (value) {
    case PayStatusQueryTypeOrder:
    case PayStatusQueryTypeEarnest:
    case PayStatusQueryTypeRemain:
      return YES;
    default:
      return NO;
  }
}

@implementation CommitOrderRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _insurance = NO;
    _orderId = @"";
    _onlyCalPrice = NO;
    _userId = @"";
    _qualityCode = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasCategoryCode) {
    [output writeString:2 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:3 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:4 value:self.rentCode];
  }
  if (self.hasInsurance) {
    [output writeBool:5 value:self.insurance];
  }
  if (self.hasOrderId) {
    [output writeString:6 value:self.orderId];
  }
  if (self.hasOnlyCalPrice) {
    [output writeBool:7 value:self.onlyCalPrice];
  }
  if (self.hasUserId) {
    [output writeString:8 value:self.userId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:9 value:element];
  }];
  if (self.hasQualityCode) {
    [output writeString:10 value:self.qualityCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(2, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(3, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(4, self.rentCode);
  }
  if (self.hasInsurance) {
    size_ += computeBoolSize(5, self.insurance);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(6, self.orderId);
  }
  if (self.hasOnlyCalPrice) {
    size_ += computeBoolSize(7, self.onlyCalPrice);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(8, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.vouchers.count;
    [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasQualityCode) {
    size_ += computeStringSize(10, self.qualityCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitOrderRequest*) parseFromData:(NSData*) data {
  CommitOrderRequest* result = [[CommitOrderRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasInsurance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insurance", [NSNumber numberWithBool:self.insurance]];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasOnlyCalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlyCalPrice", [NSNumber numberWithBool:self.onlyCalPrice]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vouchers", obj];
  }];
  if (self.hasQualityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityCode", self.qualityCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setInsurance:(BOOL) value {
  _hasInsurance = YES;
  _insurance = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setOnlyCalPrice:(BOOL) value {
  _hasOnlyCalPrice = YES;
  _onlyCalPrice = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void)setVouchersArray:(NSArray *)array {
  _vouchers = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addVouchers:(NSString*)value {
  if (_vouchers == nil) {
    _vouchers = [[NSMutableArray alloc]init];
  }
  [_vouchers addObject:value];
}
- (void) setQualityCode:(NSString*) value {
  _hasQualityCode = YES;
  _qualityCode = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 24: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 34: {
        [self setRentCode:[input readString]];
        break;
      }
      case 40: {
        [self setInsurance:[input readBool]];
        break;
      }
      case 50: {
        [self setOrderId:[input readString]];
        break;
      }
      case 56: {
        [self setOnlyCalPrice:[input readBool]];
        break;
      }
      case 66: {
        [self setUserId:[input readString]];
        break;
      }
      case 74: {
        [self addVouchers:[input readString]];
        break;
      }
      case 82: {
        [self setQualityCode:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation CommitOrderResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _insurance = NO;
    _insurancePrice = 0;
    _pledgePrice = 0;
    _transportationPrice = 0;
    _totalRentPrice = 0;
    _hasVoucher = NO;
    _totalPrice = 0;
    _maxVoucherAmount = 0;
    _qualityCode = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasCategoryCode) {
    [output writeString:4 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:5 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:6 value:self.rentCode];
  }
  if (self.hasInsurance) {
    [output writeBool:7 value:self.insurance];
  }
  if (self.hasInsurancePrice) {
    [output writeDouble:8 value:self.insurancePrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:9 value:self.pledgePrice];
  }
  if (self.hasTransportationPrice) {
    [output writeDouble:10 value:self.transportationPrice];
  }
  if (self.hasTotalRentPrice) {
    [output writeDouble:11 value:self.totalRentPrice];
  }
  if (self.hasHasVoucher) {
    [output writeBool:12 value:self.hasVoucher];
  }
  if (self.hasTotalPrice) {
    [output writeDouble:13 value:self.totalPrice];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output writeMessage:14 value:self.orderReceiveAddressInfo];
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:15 value:element];
  }];
  if (self.hasMaxVoucherAmount) {
    [output writeDouble:16 value:self.maxVoucherAmount];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:17 value:element];
  }];
  if (self.hasQualityCode) {
    [output writeString:18 value:self.qualityCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(4, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(5, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(6, self.rentCode);
  }
  if (self.hasInsurance) {
    size_ += computeBoolSize(7, self.insurance);
  }
  if (self.hasInsurancePrice) {
    size_ += computeDoubleSize(8, self.insurancePrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(9, self.pledgePrice);
  }
  if (self.hasTransportationPrice) {
    size_ += computeDoubleSize(10, self.transportationPrice);
  }
  if (self.hasTotalRentPrice) {
    size_ += computeDoubleSize(11, self.totalRentPrice);
  }
  if (self.hasHasVoucher) {
    size_ += computeBoolSize(12, self.hasVoucher);
  }
  if (self.hasTotalPrice) {
    size_ += computeDoubleSize(13, self.totalPrice);
  }
  if (self.hasOrderReceiveAddressInfo) {
    size_ += computeMessageSize(14, self.orderReceiveAddressInfo);
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(15, element);
  }];
  if (self.hasMaxVoucherAmount) {
    size_ += computeDoubleSize(16, self.maxVoucherAmount);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.vouchers.count;
    [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasQualityCode) {
    size_ += computeStringSize(18, self.qualityCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitOrderResult*) parseFromData:(NSData*) data {
  CommitOrderResult* result = [[CommitOrderResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasInsurance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insurance", [NSNumber numberWithBool:self.insurance]];
  }
  if (self.hasInsurancePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insurancePrice", [NSNumber numberWithDouble:self.insurancePrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasTransportationPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationPrice", [NSNumber numberWithDouble:self.transportationPrice]];
  }
  if (self.hasTotalRentPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalRentPrice", [NSNumber numberWithDouble:self.totalRentPrice]];
  }
  if (self.hasHasVoucher) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasVoucher", [NSNumber numberWithBool:self.hasVoucher]];
  }
  if (self.hasTotalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPrice", [NSNumber numberWithDouble:self.totalPrice]];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderReceiveAddressInfo"];
    [self.orderReceiveAddressInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"voucherInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasMaxVoucherAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxVoucherAmount", [NSNumber numberWithDouble:self.maxVoucherAmount]];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vouchers", obj];
  }];
  if (self.hasQualityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityCode", self.qualityCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setInsurance:(BOOL) value {
  _hasInsurance = YES;
  _insurance = value;
}
- (void) setInsurancePrice:(Float64) value {
  _hasInsurancePrice = YES;
  _insurancePrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setTransportationPrice:(Float64) value {
  _hasTransportationPrice = YES;
  _transportationPrice = value;
}
- (void) setTotalRentPrice:(Float64) value {
  _hasTotalRentPrice = YES;
  _totalRentPrice = value;
}
- (void) setHasVoucher:(BOOL) value {
  _hasHasVoucher = YES;
  _hasVoucher = value;
}
- (void) setTotalPrice:(Float64) value {
  _hasTotalPrice = YES;
  _totalPrice = value;
}
- (void) setOrderReceiveAddressInfo:(OrderReceiveAddressInfo*) value {
  _hasOrderReceiveAddressInfo = YES;
  _orderReceiveAddressInfo = value;
}
- (void)setVoucherInfoArray:(NSArray *)array {
  _voucherInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addVoucherInfo:(OrderVoucherInfo*)value {
  if (_voucherInfo == nil) {
    _voucherInfo = [[NSMutableArray alloc]init];
  }
  [_voucherInfo addObject:value];
}
- (void) setMaxVoucherAmount:(Float64) value {
  _hasMaxVoucherAmount = YES;
  _maxVoucherAmount = value;
}
- (void)setVouchersArray:(NSArray *)array {
  _vouchers = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addVouchers:(NSString*)value {
  if (_vouchers == nil) {
    _vouchers = [[NSMutableArray alloc]init];
  }
  [_vouchers addObject:value];
}
- (void) setQualityCode:(NSString*) value {
  _hasQualityCode = YES;
  _qualityCode = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 34: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 40: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 50: {
        [self setRentCode:[input readString]];
        break;
      }
      case 56: {
        [self setInsurance:[input readBool]];
        break;
      }
      case 65: {
        [self setInsurancePrice:[input readDouble]];
        break;
      }
      case 73: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setTransportationPrice:[input readDouble]];
        break;
      }
      case 89: {
        [self setTotalRentPrice:[input readDouble]];
        break;
      }
      case 96: {
        [self setHasVoucher:[input readBool]];
        break;
      }
      case 105: {
        [self setTotalPrice:[input readDouble]];
        break;
      }
      case 114: {
        OrderReceiveAddressInfo* sub = [[OrderReceiveAddressInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setOrderReceiveAddressInfo:sub];
        break;
      }
      case 122: {
        OrderVoucherInfo* sub = [[OrderVoucherInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addVoucherInfo:sub];
        break;
      }
      case 129: {
        [self setMaxVoucherAmount:[input readDouble]];
        break;
      }
      case 138: {
        [self addVouchers:[input readString]];
        break;
      }
      case 146: {
        [self setQualityCode:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation OrderReceiveAddressInfo

- (instancetype) init {
  if ((self = [super init])) {
    _receiver = @"";
    _mobileNo = @"";
    _section = @"";
    _street = @"";
    _detail = @"";
    _postCode = @"";
    _addressId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasReceiver) {
    [output writeString:1 value:self.receiver];
  }
  if (self.hasMobileNo) {
    [output writeString:2 value:self.mobileNo];
  }
  if (self.hasSection) {
    [output writeString:3 value:self.section];
  }
  if (self.hasStreet) {
    [output writeString:4 value:self.street];
  }
  if (self.hasDetail) {
    [output writeString:5 value:self.detail];
  }
  if (self.hasPostCode) {
    [output writeString:6 value:self.postCode];
  }
  if (self.hasAddressId) {
    [output writeString:7 value:self.addressId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasReceiver) {
    size_ += computeStringSize(1, self.receiver);
  }
  if (self.hasMobileNo) {
    size_ += computeStringSize(2, self.mobileNo);
  }
  if (self.hasSection) {
    size_ += computeStringSize(3, self.section);
  }
  if (self.hasStreet) {
    size_ += computeStringSize(4, self.street);
  }
  if (self.hasDetail) {
    size_ += computeStringSize(5, self.detail);
  }
  if (self.hasPostCode) {
    size_ += computeStringSize(6, self.postCode);
  }
  if (self.hasAddressId) {
    size_ += computeStringSize(7, self.addressId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OrderReceiveAddressInfo*) parseFromData:(NSData*) data {
  OrderReceiveAddressInfo* result = [[OrderReceiveAddressInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasReceiver) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receiver", self.receiver];
  }
  if (self.hasMobileNo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mobileNo", self.mobileNo];
  }
  if (self.hasSection) {
    [output appendFormat:@"%@%@: %@\n", indent, @"section", self.section];
  }
  if (self.hasStreet) {
    [output appendFormat:@"%@%@: %@\n", indent, @"street", self.street];
  }
  if (self.hasDetail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"detail", self.detail];
  }
  if (self.hasPostCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"postCode", self.postCode];
  }
  if (self.hasAddressId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addressId", self.addressId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setReceiver:(NSString*) value {
  _hasReceiver = YES;
  _receiver = value;
}
- (void) setMobileNo:(NSString*) value {
  _hasMobileNo = YES;
  _mobileNo = value;
}
- (void) setSection:(NSString*) value {
  _hasSection = YES;
  _section = value;
}
- (void) setStreet:(NSString*) value {
  _hasStreet = YES;
  _street = value;
}
- (void) setDetail:(NSString*) value {
  _hasDetail = YES;
  _detail = value;
}
- (void) setPostCode:(NSString*) value {
  _hasPostCode = YES;
  _postCode = value;
}
- (void) setAddressId:(NSString*) value {
  _hasAddressId = YES;
  _addressId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setReceiver:[input readString]];
        break;
      }
      case 18: {
        [self setMobileNo:[input readString]];
        break;
      }
      case 26: {
        [self setSection:[input readString]];
        break;
      }
      case 34: {
        [self setStreet:[input readString]];
        break;
      }
      case 42: {
        [self setDetail:[input readString]];
        break;
      }
      case 50: {
        [self setPostCode:[input readString]];
        break;
      }
      case 58: {
        [self setAddressId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmOrderRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _insurance = NO;
    _orderId = @"";
    _addressId = @"";
    _userMessage = @"";
    _payChannel = 0;
    _userId = @"";
    _qualityCode = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasCategoryCode) {
    [output writeString:2 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:3 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:4 value:self.rentCode];
  }
  if (self.hasInsurance) {
    [output writeBool:5 value:self.insurance];
  }
  if (self.hasOrderId) {
    [output writeString:6 value:self.orderId];
  }
  if (self.hasAddressId) {
    [output writeString:7 value:self.addressId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:8 value:element];
  }];
  if (self.hasUserMessage) {
    [output writeString:9 value:self.userMessage];
  }
  if (self.hasPayChannel) {
    [output writeInt32:10 value:self.payChannel];
  }
  if (self.hasUserId) {
    [output writeString:11 value:self.userId];
  }
  if (self.hasQualityCode) {
    [output writeString:12 value:self.qualityCode];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(2, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(3, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(4, self.rentCode);
  }
  if (self.hasInsurance) {
    size_ += computeBoolSize(5, self.insurance);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(6, self.orderId);
  }
  if (self.hasAddressId) {
    size_ += computeStringSize(7, self.addressId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.vouchers.count;
    [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasUserMessage) {
    size_ += computeStringSize(9, self.userMessage);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(10, self.payChannel);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(11, self.userId);
  }
  if (self.hasQualityCode) {
    size_ += computeStringSize(12, self.qualityCode);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmOrderRequest*) parseFromData:(NSData*) data {
  ConfirmOrderRequest* result = [[ConfirmOrderRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasInsurance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insurance", [NSNumber numberWithBool:self.insurance]];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasAddressId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addressId", self.addressId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vouchers", obj];
  }];
  if (self.hasUserMessage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userMessage", self.userMessage];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasQualityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityCode", self.qualityCode];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setInsurance:(BOOL) value {
  _hasInsurance = YES;
  _insurance = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setAddressId:(NSString*) value {
  _hasAddressId = YES;
  _addressId = value;
}
- (void)setVouchersArray:(NSArray *)array {
  _vouchers = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addVouchers:(NSString*)value {
  if (_vouchers == nil) {
    _vouchers = [[NSMutableArray alloc]init];
  }
  [_vouchers addObject:value];
}
- (void) setUserMessage:(NSString*) value {
  _hasUserMessage = YES;
  _userMessage = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setQualityCode:(NSString*) value {
  _hasQualityCode = YES;
  _qualityCode = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 24: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 34: {
        [self setRentCode:[input readString]];
        break;
      }
      case 40: {
        [self setInsurance:[input readBool]];
        break;
      }
      case 50: {
        [self setOrderId:[input readString]];
        break;
      }
      case 58: {
        [self setAddressId:[input readString]];
        break;
      }
      case 66: {
        [self addVouchers:[input readString]];
        break;
      }
      case 74: {
        [self setUserMessage:[input readString]];
        break;
      }
      case 80: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 90: {
        [self setUserId:[input readString]];
        break;
      }
      case 98: {
        [self setQualityCode:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmOrderResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _payChannel = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:4 value:self.payChannel];
  }
  if (self.hasWxPayInfo) {
    [output writeMessage:5 value:self.wxPayInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(4, self.payChannel);
  }
  if (self.hasWxPayInfo) {
    size_ += computeMessageSize(5, self.wxPayInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmOrderResult*) parseFromData:(NSData*) data {
  ConfirmOrderResult* result = [[ConfirmOrderResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasWxPayInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"wxPayInfo"];
    [self.wxPayInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setWxPayInfo:(WxPayInfo*) value {
  _hasWxPayInfo = YES;
  _wxPayInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 32: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 42: {
        WxPayInfo* sub = [[WxPayInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setWxPayInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation WxPayInfo

- (instancetype) init {
  if ((self = [super init])) {
    _partnerId = @"";
    _prepayId = @"";
    _package = @"";
    _nonceStr = @"";
    _timeStamp = @"";
    _sign = @"";
    _appId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPartnerId) {
    [output writeString:1 value:self.partnerId];
  }
  if (self.hasPrepayId) {
    [output writeString:2 value:self.prepayId];
  }
  if (self.hasPackage) {
    [output writeString:3 value:self.package];
  }
  if (self.hasNonceStr) {
    [output writeString:4 value:self.nonceStr];
  }
  if (self.hasTimeStamp) {
    [output writeString:5 value:self.timeStamp];
  }
  if (self.hasSign) {
    [output writeString:6 value:self.sign];
  }
  if (self.hasAppId) {
    [output writeString:7 value:self.appId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasPartnerId) {
    size_ += computeStringSize(1, self.partnerId);
  }
  if (self.hasPrepayId) {
    size_ += computeStringSize(2, self.prepayId);
  }
  if (self.hasPackage) {
    size_ += computeStringSize(3, self.package);
  }
  if (self.hasNonceStr) {
    size_ += computeStringSize(4, self.nonceStr);
  }
  if (self.hasTimeStamp) {
    size_ += computeStringSize(5, self.timeStamp);
  }
  if (self.hasSign) {
    size_ += computeStringSize(6, self.sign);
  }
  if (self.hasAppId) {
    size_ += computeStringSize(7, self.appId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (WxPayInfo*) parseFromData:(NSData*) data {
  WxPayInfo* result = [[WxPayInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasPartnerId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"partnerId", self.partnerId];
  }
  if (self.hasPrepayId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"prepayId", self.prepayId];
  }
  if (self.hasPackage) {
    [output appendFormat:@"%@%@: %@\n", indent, @"package", self.package];
  }
  if (self.hasNonceStr) {
    [output appendFormat:@"%@%@: %@\n", indent, @"nonceStr", self.nonceStr];
  }
  if (self.hasTimeStamp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeStamp", self.timeStamp];
  }
  if (self.hasSign) {
    [output appendFormat:@"%@%@: %@\n", indent, @"sign", self.sign];
  }
  if (self.hasAppId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"appId", self.appId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setPartnerId:(NSString*) value {
  _hasPartnerId = YES;
  _partnerId = value;
}
- (void) setPrepayId:(NSString*) value {
  _hasPrepayId = YES;
  _prepayId = value;
}
- (void) setPackage:(NSString*) value {
  _hasPackage = YES;
  _package = value;
}
- (void) setNonceStr:(NSString*) value {
  _hasNonceStr = YES;
  _nonceStr = value;
}
- (void) setTimeStamp:(NSString*) value {
  _hasTimeStamp = YES;
  _timeStamp = value;
}
- (void) setSign:(NSString*) value {
  _hasSign = YES;
  _sign = value;
}
- (void) setAppId:(NSString*) value {
  _hasAppId = YES;
  _appId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setPartnerId:[input readString]];
        break;
      }
      case 18: {
        [self setPrepayId:[input readString]];
        break;
      }
      case 26: {
        [self setPackage:[input readString]];
        break;
      }
      case 34: {
        [self setNonceStr:[input readString]];
        break;
      }
      case 42: {
        [self setTimeStamp:[input readString]];
        break;
      }
      case 50: {
        [self setSign:[input readString]];
        break;
      }
      case 58: {
        [self setAppId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmPayRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _payChannel = 0;
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:2 value:self.payChannel];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(2, self.payChannel);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmPayRequest*) parseFromData:(NSData*) data {
  ConfirmPayRequest* result = [[ConfirmPayRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 16: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmPayResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _payChannel = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:4 value:self.payChannel];
  }
  if (self.hasWxPayInfo) {
    [output writeMessage:5 value:self.wxPayInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(4, self.payChannel);
  }
  if (self.hasWxPayInfo) {
    size_ += computeMessageSize(5, self.wxPayInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmPayResult*) parseFromData:(NSData*) data {
  ConfirmPayResult* result = [[ConfirmPayResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasWxPayInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"wxPayInfo"];
    [self.wxPayInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setWxPayInfo:(WxPayInfo*) value {
  _hasWxPayInfo = YES;
  _wxPayInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 32: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 42: {
        WxPayInfo* sub = [[WxPayInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setWxPayInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation GetPayStatusRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _userId = @"";
    _payStatusQueryType = PayStatusQueryTypeOrder;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  if (self.hasPayStatusQueryType) {
    [output writeEnum:3 value:self.payStatusQueryType];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  if (self.hasPayStatusQueryType) {
    size_ += computeEnumSize(3, self.payStatusQueryType);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetPayStatusRequest*) parseFromData:(NSData*) data {
  GetPayStatusRequest* result = [[GetPayStatusRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasPayStatusQueryType) {
    [output appendFormat:@"%@%@: %d\n", indent, @"payStatusQueryType", (int)self.payStatusQueryType];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setPayStatusQueryType:(PayStatusQueryType) value {
  _hasPayStatusQueryType = YES;
  _payStatusQueryType = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
      case 24: {
        PayStatusQueryType value = (PayStatusQueryType)[input readEnum];
        if (PayStatusQueryTypeIsValidValue(value)) {
          [self setPayStatusQueryType:value];
        } else {
          [unknownFields_ mergeVarintField:3 value:value];
        }
        break;
      }
    }
  }
}
@end


@implementation GetPayStatusResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _payChannel = 0;
    _totalPayFee = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:4 value:self.payChannel];
  }
  if (self.hasTotalPayFee) {
    [output writeDouble:5 value:self.totalPayFee];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output writeMessage:6 value:self.orderReceiveAddressInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(4, self.payChannel);
  }
  if (self.hasTotalPayFee) {
    size_ += computeDoubleSize(5, self.totalPayFee);
  }
  if (self.hasOrderReceiveAddressInfo) {
    size_ += computeMessageSize(6, self.orderReceiveAddressInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetPayStatusResult*) parseFromData:(NSData*) data {
  GetPayStatusResult* result = [[GetPayStatusResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasTotalPayFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPayFee", [NSNumber numberWithDouble:self.totalPayFee]];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderReceiveAddressInfo"];
    [self.orderReceiveAddressInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setTotalPayFee:(Float64) value {
  _hasTotalPayFee = YES;
  _totalPayFee = value;
}
- (void) setOrderReceiveAddressInfo:(OrderReceiveAddressInfo*) value {
  _hasOrderReceiveAddressInfo = YES;
  _orderReceiveAddressInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 32: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 41: {
        [self setTotalPayFee:[input readDouble]];
        break;
      }
      case 50: {
        OrderReceiveAddressInfo* sub = [[OrderReceiveAddressInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setOrderReceiveAddressInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation SearchOrderListRequest

- (instancetype) init {
  if ((self = [super init])) {
    _keyWords = @"";
    _orderStatus = 0;
    _evaluateStauts = NO;
    _startIndex = 0;
    _startTime = 0L;
    _endTime = 0L;
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKeyWords) {
    [output writeString:1 value:self.keyWords];
  }
  if (self.hasOrderStatus) {
    [output writeInt32:2 value:self.orderStatus];
  }
  if (self.hasEvaluateStauts) {
    [output writeBool:3 value:self.evaluateStauts];
  }
  if (self.hasStartIndex) {
    [output writeInt32:4 value:self.startIndex];
  }
  if (self.hasStartTime) {
    [output writeInt64:5 value:self.startTime];
  }
  if (self.hasEndTime) {
    [output writeInt64:6 value:self.endTime];
  }
  if (self.hasUserId) {
    [output writeString:7 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasKeyWords) {
    size_ += computeStringSize(1, self.keyWords);
  }
  if (self.hasOrderStatus) {
    size_ += computeInt32Size(2, self.orderStatus);
  }
  if (self.hasEvaluateStauts) {
    size_ += computeBoolSize(3, self.evaluateStauts);
  }
  if (self.hasStartIndex) {
    size_ += computeInt32Size(4, self.startIndex);
  }
  if (self.hasStartTime) {
    size_ += computeInt64Size(5, self.startTime);
  }
  if (self.hasEndTime) {
    size_ += computeInt64Size(6, self.endTime);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(7, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchOrderListRequest*) parseFromData:(NSData*) data {
  SearchOrderListRequest* result = [[SearchOrderListRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKeyWords) {
    [output appendFormat:@"%@%@: %@\n", indent, @"keyWords", self.keyWords];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", [NSNumber numberWithInteger:self.orderStatus]];
  }
  if (self.hasEvaluateStauts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateStauts", [NSNumber numberWithBool:self.evaluateStauts]];
  }
  if (self.hasStartIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startIndex", [NSNumber numberWithInteger:self.startIndex]];
  }
  if (self.hasStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"startTime", [NSNumber numberWithLongLong:self.startTime]];
  }
  if (self.hasEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"endTime", [NSNumber numberWithLongLong:self.endTime]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setKeyWords:(NSString*) value {
  _hasKeyWords = YES;
  _keyWords = value;
}
- (void) setOrderStatus:(SInt32) value {
  _hasOrderStatus = YES;
  _orderStatus = value;
}
- (void) setEvaluateStauts:(BOOL) value {
  _hasEvaluateStauts = YES;
  _evaluateStauts = value;
}
- (void) setStartIndex:(SInt32) value {
  _hasStartIndex = YES;
  _startIndex = value;
}
- (void) setStartTime:(SInt64) value {
  _hasStartTime = YES;
  _startTime = value;
}
- (void) setEndTime:(SInt64) value {
  _hasEndTime = YES;
  _endTime = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setKeyWords:[input readString]];
        break;
      }
      case 16: {
        [self setOrderStatus:[input readInt32]];
        break;
      }
      case 24: {
        [self setEvaluateStauts:[input readBool]];
        break;
      }
      case 32: {
        [self setStartIndex:[input readInt32]];
        break;
      }
      case 40: {
        [self setStartTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setEndTime:[input readInt64]];
        break;
      }
      case 58: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation SearchOrderListResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _maxIndex = 0;
    _hasMore = NO;
    _waitPayCount = 0;
    _waitDeliveryCount = 0;
    _waitReceiveCount = 0;
    _waitRevertCount = 0;
    _waitEvaluateCount = 0;
    _totalCount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output writeInt32:3 value:self.maxIndex];
  }
  if (self.hasHasMore) {
    [output writeBool:4 value:self.hasMore];
  }
  if (self.hasWaitPayCount) {
    [output writeInt32:5 value:self.waitPayCount];
  }
  if (self.hasWaitDeliveryCount) {
    [output writeInt32:6 value:self.waitDeliveryCount];
  }
  if (self.hasWaitReceiveCount) {
    [output writeInt32:7 value:self.waitReceiveCount];
  }
  if (self.hasWaitRevertCount) {
    [output writeInt32:8 value:self.waitRevertCount];
  }
  if (self.hasWaitEvaluateCount) {
    [output writeInt32:9 value:self.waitEvaluateCount];
  }
  if (self.hasTotalCount) {
    [output writeInt32:10 value:self.totalCount];
  }
  [self.orderLiteInfo enumerateObjectsUsingBlock:^(OrderLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:11 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasMaxIndex) {
    size_ += computeInt32Size(3, self.maxIndex);
  }
  if (self.hasHasMore) {
    size_ += computeBoolSize(4, self.hasMore);
  }
  if (self.hasWaitPayCount) {
    size_ += computeInt32Size(5, self.waitPayCount);
  }
  if (self.hasWaitDeliveryCount) {
    size_ += computeInt32Size(6, self.waitDeliveryCount);
  }
  if (self.hasWaitReceiveCount) {
    size_ += computeInt32Size(7, self.waitReceiveCount);
  }
  if (self.hasWaitRevertCount) {
    size_ += computeInt32Size(8, self.waitRevertCount);
  }
  if (self.hasWaitEvaluateCount) {
    size_ += computeInt32Size(9, self.waitEvaluateCount);
  }
  if (self.hasTotalCount) {
    size_ += computeInt32Size(10, self.totalCount);
  }
  [self.orderLiteInfo enumerateObjectsUsingBlock:^(OrderLiteInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(11, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (SearchOrderListResult*) parseFromData:(NSData*) data {
  SearchOrderListResult* result = [[SearchOrderListResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasMaxIndex) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxIndex", [NSNumber numberWithInteger:self.maxIndex]];
  }
  if (self.hasHasMore) {
    [output appendFormat:@"%@%@: %@\n", indent, @"hasMore", [NSNumber numberWithBool:self.hasMore]];
  }
  if (self.hasWaitPayCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitPayCount", [NSNumber numberWithInteger:self.waitPayCount]];
  }
  if (self.hasWaitDeliveryCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitDeliveryCount", [NSNumber numberWithInteger:self.waitDeliveryCount]];
  }
  if (self.hasWaitReceiveCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitReceiveCount", [NSNumber numberWithInteger:self.waitReceiveCount]];
  }
  if (self.hasWaitRevertCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitRevertCount", [NSNumber numberWithInteger:self.waitRevertCount]];
  }
  if (self.hasWaitEvaluateCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"waitEvaluateCount", [NSNumber numberWithInteger:self.waitEvaluateCount]];
  }
  if (self.hasTotalCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalCount", [NSNumber numberWithInteger:self.totalCount]];
  }
  [self.orderLiteInfo enumerateObjectsUsingBlock:^(OrderLiteInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderLiteInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setMaxIndex:(SInt32) value {
  _hasMaxIndex = YES;
  _maxIndex = value;
}
- (void) setHasMore:(BOOL) value {
  _hasHasMore = YES;
  _hasMore = value;
}
- (void) setWaitPayCount:(SInt32) value {
  _hasWaitPayCount = YES;
  _waitPayCount = value;
}
- (void) setWaitDeliveryCount:(SInt32) value {
  _hasWaitDeliveryCount = YES;
  _waitDeliveryCount = value;
}
- (void) setWaitReceiveCount:(SInt32) value {
  _hasWaitReceiveCount = YES;
  _waitReceiveCount = value;
}
- (void) setWaitRevertCount:(SInt32) value {
  _hasWaitRevertCount = YES;
  _waitRevertCount = value;
}
- (void) setWaitEvaluateCount:(SInt32) value {
  _hasWaitEvaluateCount = YES;
  _waitEvaluateCount = value;
}
- (void) setTotalCount:(SInt32) value {
  _hasTotalCount = YES;
  _totalCount = value;
}
- (void)setOrderLiteInfoArray:(NSArray *)array {
  _orderLiteInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addOrderLiteInfo:(OrderLiteInfo*)value {
  if (_orderLiteInfo == nil) {
    _orderLiteInfo = [[NSMutableArray alloc]init];
  }
  [_orderLiteInfo addObject:value];
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 24: {
        [self setMaxIndex:[input readInt32]];
        break;
      }
      case 32: {
        [self setHasMore:[input readBool]];
        break;
      }
      case 40: {
        [self setWaitPayCount:[input readInt32]];
        break;
      }
      case 48: {
        [self setWaitDeliveryCount:[input readInt32]];
        break;
      }
      case 56: {
        [self setWaitReceiveCount:[input readInt32]];
        break;
      }
      case 64: {
        [self setWaitRevertCount:[input readInt32]];
        break;
      }
      case 72: {
        [self setWaitEvaluateCount:[input readInt32]];
        break;
      }
      case 80: {
        [self setTotalCount:[input readInt32]];
        break;
      }
      case 90: {
        OrderLiteInfo* sub = [[OrderLiteInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addOrderLiteInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation OrderLiteInfo

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _orderStatus = 0;
    _createTime = 0L;
    _rentStartTime = 0L;
    _rentEndTime = 0L;
    _rentDays = 0;
    _rentCount = 0;
    _rentPrice = 0;
    _pledgePrice = 0;
    _transportationPrice = 0;
    _totalPrice = 0;
    _transportationId = @"";
    _evaluateStauts = NO;
    _productId = @"";
    _mainImageUrl = @"";
    _desc = @"";
    _categoryName = @"";
    _discount = 0;
    _originalRentAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasOrderStatus) {
    [output writeInt32:2 value:self.orderStatus];
  }
  if (self.hasCreateTime) {
    [output writeInt64:3 value:self.createTime];
  }
  if (self.hasRentStartTime) {
    [output writeInt64:4 value:self.rentStartTime];
  }
  if (self.hasRentEndTime) {
    [output writeInt64:5 value:self.rentEndTime];
  }
  if (self.hasRentDays) {
    [output writeInt32:6 value:self.rentDays];
  }
  if (self.hasRentCount) {
    [output writeInt32:7 value:self.rentCount];
  }
  if (self.hasRentPrice) {
    [output writeDouble:8 value:self.rentPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:9 value:self.pledgePrice];
  }
  if (self.hasTransportationPrice) {
    [output writeDouble:10 value:self.transportationPrice];
  }
  if (self.hasTotalPrice) {
    [output writeDouble:11 value:self.totalPrice];
  }
  if (self.hasTransportationId) {
    [output writeString:12 value:self.transportationId];
  }
  if (self.hasEvaluateStauts) {
    [output writeBool:13 value:self.evaluateStauts];
  }
  if (self.hasProductId) {
    [output writeString:14 value:self.productId];
  }
  if (self.hasMainImageUrl) {
    [output writeString:15 value:self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output writeString:16 value:self.desc];
  }
  if (self.hasCategoryName) {
    [output writeString:17 value:self.categoryName];
  }
  if (self.hasDiscount) {
    [output writeDouble:18 value:self.discount];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:19 value:self.originalRentAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasOrderStatus) {
    size_ += computeInt32Size(2, self.orderStatus);
  }
  if (self.hasCreateTime) {
    size_ += computeInt64Size(3, self.createTime);
  }
  if (self.hasRentStartTime) {
    size_ += computeInt64Size(4, self.rentStartTime);
  }
  if (self.hasRentEndTime) {
    size_ += computeInt64Size(5, self.rentEndTime);
  }
  if (self.hasRentDays) {
    size_ += computeInt32Size(6, self.rentDays);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(7, self.rentCount);
  }
  if (self.hasRentPrice) {
    size_ += computeDoubleSize(8, self.rentPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(9, self.pledgePrice);
  }
  if (self.hasTransportationPrice) {
    size_ += computeDoubleSize(10, self.transportationPrice);
  }
  if (self.hasTotalPrice) {
    size_ += computeDoubleSize(11, self.totalPrice);
  }
  if (self.hasTransportationId) {
    size_ += computeStringSize(12, self.transportationId);
  }
  if (self.hasEvaluateStauts) {
    size_ += computeBoolSize(13, self.evaluateStauts);
  }
  if (self.hasProductId) {
    size_ += computeStringSize(14, self.productId);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(15, self.mainImageUrl);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(16, self.desc);
  }
  if (self.hasCategoryName) {
    size_ += computeStringSize(17, self.categoryName);
  }
  if (self.hasDiscount) {
    size_ += computeDoubleSize(18, self.discount);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(19, self.originalRentAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OrderLiteInfo*) parseFromData:(NSData*) data {
  OrderLiteInfo* result = [[OrderLiteInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", [NSNumber numberWithInteger:self.orderStatus]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithLongLong:self.createTime]];
  }
  if (self.hasRentStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentStartTime", [NSNumber numberWithLongLong:self.rentStartTime]];
  }
  if (self.hasRentEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentEndTime", [NSNumber numberWithLongLong:self.rentEndTime]];
  }
  if (self.hasRentDays) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentDays", [NSNumber numberWithInteger:self.rentDays]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPrice", [NSNumber numberWithDouble:self.rentPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasTransportationPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationPrice", [NSNumber numberWithDouble:self.transportationPrice]];
  }
  if (self.hasTotalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPrice", [NSNumber numberWithDouble:self.totalPrice]];
  }
  if (self.hasTransportationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationId", self.transportationId];
  }
  if (self.hasEvaluateStauts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateStauts", [NSNumber numberWithBool:self.evaluateStauts]];
  }
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasCategoryName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryName", self.categoryName];
  }
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setOrderStatus:(SInt32) value {
  _hasOrderStatus = YES;
  _orderStatus = value;
}
- (void) setCreateTime:(SInt64) value {
  _hasCreateTime = YES;
  _createTime = value;
}
- (void) setRentStartTime:(SInt64) value {
  _hasRentStartTime = YES;
  _rentStartTime = value;
}
- (void) setRentEndTime:(SInt64) value {
  _hasRentEndTime = YES;
  _rentEndTime = value;
}
- (void) setRentDays:(SInt32) value {
  _hasRentDays = YES;
  _rentDays = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentPrice:(Float64) value {
  _hasRentPrice = YES;
  _rentPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setTransportationPrice:(Float64) value {
  _hasTransportationPrice = YES;
  _transportationPrice = value;
}
- (void) setTotalPrice:(Float64) value {
  _hasTotalPrice = YES;
  _totalPrice = value;
}
- (void) setTransportationId:(NSString*) value {
  _hasTransportationId = YES;
  _transportationId = value;
}
- (void) setEvaluateStauts:(BOOL) value {
  _hasEvaluateStauts = YES;
  _evaluateStauts = value;
}
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setCategoryName:(NSString*) value {
  _hasCategoryName = YES;
  _categoryName = value;
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 16: {
        [self setOrderStatus:[input readInt32]];
        break;
      }
      case 24: {
        [self setCreateTime:[input readInt64]];
        break;
      }
      case 32: {
        [self setRentStartTime:[input readInt64]];
        break;
      }
      case 40: {
        [self setRentEndTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setRentDays:[input readInt32]];
        break;
      }
      case 56: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 65: {
        [self setRentPrice:[input readDouble]];
        break;
      }
      case 73: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setTransportationPrice:[input readDouble]];
        break;
      }
      case 89: {
        [self setTotalPrice:[input readDouble]];
        break;
      }
      case 98: {
        [self setTransportationId:[input readString]];
        break;
      }
      case 104: {
        [self setEvaluateStauts:[input readBool]];
        break;
      }
      case 114: {
        [self setProductId:[input readString]];
        break;
      }
      case 122: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 130: {
        [self setDesc:[input readString]];
        break;
      }
      case 138: {
        [self setCategoryName:[input readString]];
        break;
      }
      case 145: {
        [self setDiscount:[input readDouble]];
        break;
      }
      case 153: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation DeleteOrderRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeleteOrderRequest*) parseFromData:(NSData*) data {
  DeleteOrderRequest* result = [[DeleteOrderRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation DeleteOrderResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (DeleteOrderResult*) parseFromData:(NSData*) data {
  DeleteOrderResult* result = [[DeleteOrderResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation CancelOrderRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _reason = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasReason) {
    [output writeString:2 value:self.reason];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasReason) {
    size_ += computeStringSize(2, self.reason);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CancelOrderRequest*) parseFromData:(NSData*) data {
  CancelOrderRequest* result = [[CancelOrderRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"reason", self.reason];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setReason:(NSString*) value {
  _hasReason = YES;
  _reason = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setReason:[input readString]];
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation CancelOrderResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CancelOrderResult*) parseFromData:(NSData*) data {
  CancelOrderResult* result = [[CancelOrderResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmReceiveRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmReceiveRequest*) parseFromData:(NSData*) data {
  ConfirmReceiveRequest* result = [[ConfirmReceiveRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmReceiveResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmReceiveResult*) parseFromData:(NSData*) data {
  ConfirmReceiveResult* result = [[ConfirmReceiveResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ApplyRevertRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _applyRevertType = @"";
    _transportationId = @"";
    _transportationCompany = @"";
    _userId = @"";
    _revertIntro = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasApplyRevertType) {
    [output writeString:2 value:self.applyRevertType];
  }
  if (self.hasTransportationId) {
    [output writeString:3 value:self.transportationId];
  }
  if (self.hasTransportationCompany) {
    [output writeString:4 value:self.transportationCompany];
  }
  if (self.hasUserId) {
    [output writeString:5 value:self.userId];
  }
  [self.evidentalImgs enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:6 value:element];
  }];
  if (self.hasRevertIntro) {
    [output writeString:7 value:self.revertIntro];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasApplyRevertType) {
    size_ += computeStringSize(2, self.applyRevertType);
  }
  if (self.hasTransportationId) {
    size_ += computeStringSize(3, self.transportationId);
  }
  if (self.hasTransportationCompany) {
    size_ += computeStringSize(4, self.transportationCompany);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(5, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.evidentalImgs.count;
    [self.evidentalImgs enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasRevertIntro) {
    size_ += computeStringSize(7, self.revertIntro);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ApplyRevertRequest*) parseFromData:(NSData*) data {
  ApplyRevertRequest* result = [[ApplyRevertRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasApplyRevertType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"applyRevertType", self.applyRevertType];
  }
  if (self.hasTransportationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationId", self.transportationId];
  }
  if (self.hasTransportationCompany) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationCompany", self.transportationCompany];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.evidentalImgs enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evidentalImgs", obj];
  }];
  if (self.hasRevertIntro) {
    [output appendFormat:@"%@%@: %@\n", indent, @"revertIntro", self.revertIntro];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setApplyRevertType:(NSString*) value {
  _hasApplyRevertType = YES;
  _applyRevertType = value;
}
- (void) setTransportationId:(NSString*) value {
  _hasTransportationId = YES;
  _transportationId = value;
}
- (void) setTransportationCompany:(NSString*) value {
  _hasTransportationCompany = YES;
  _transportationCompany = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void)setEvidentalImgsArray:(NSArray *)array {
  _evidentalImgs = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addEvidentalImgs:(NSString*)value {
  if (_evidentalImgs == nil) {
    _evidentalImgs = [[NSMutableArray alloc]init];
  }
  [_evidentalImgs addObject:value];
}
- (void) setRevertIntro:(NSString*) value {
  _hasRevertIntro = YES;
  _revertIntro = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setApplyRevertType:[input readString]];
        break;
      }
      case 26: {
        [self setTransportationId:[input readString]];
        break;
      }
      case 34: {
        [self setTransportationCompany:[input readString]];
        break;
      }
      case 42: {
        [self setUserId:[input readString]];
        break;
      }
      case 50: {
        [self addEvidentalImgs:[input readString]];
        break;
      }
      case 58: {
        [self setRevertIntro:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ApplyRevertResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ApplyRevertResult*) parseFromData:(NSData*) data {
  ApplyRevertResult* result = [[ApplyRevertResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ApplyRefundRequest

- (instancetype) init {
  if ((self = [super init])) {
    _userId = @"";
    _orderId = @"";
    _refundType = @"";
    _goodsStatus = @"";
    _refundReason = @"";
    _refundFee = 0;
    _refundIntro = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  if (self.hasRefundType) {
    [output writeString:3 value:self.refundType];
  }
  if (self.hasGoodsStatus) {
    [output writeString:4 value:self.goodsStatus];
  }
  if (self.hasRefundReason) {
    [output writeString:5 value:self.refundReason];
  }
  if (self.hasRefundFee) {
    [output writeDouble:6 value:self.refundFee];
  }
  [self.evidentalImgs enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:7 value:element];
  }];
  if (self.hasRefundIntro) {
    [output writeString:8 value:self.refundIntro];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(2, self.orderId);
  }
  if (self.hasRefundType) {
    size_ += computeStringSize(3, self.refundType);
  }
  if (self.hasGoodsStatus) {
    size_ += computeStringSize(4, self.goodsStatus);
  }
  if (self.hasRefundReason) {
    size_ += computeStringSize(5, self.refundReason);
  }
  if (self.hasRefundFee) {
    size_ += computeDoubleSize(6, self.refundFee);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.evidentalImgs.count;
    [self.evidentalImgs enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasRefundIntro) {
    size_ += computeStringSize(8, self.refundIntro);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ApplyRefundRequest*) parseFromData:(NSData*) data {
  ApplyRefundRequest* result = [[ApplyRefundRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasRefundType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundType", self.refundType];
  }
  if (self.hasGoodsStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"goodsStatus", self.goodsStatus];
  }
  if (self.hasRefundReason) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundReason", self.refundReason];
  }
  if (self.hasRefundFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundFee", [NSNumber numberWithDouble:self.refundFee]];
  }
  [self.evidentalImgs enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evidentalImgs", obj];
  }];
  if (self.hasRefundIntro) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundIntro", self.refundIntro];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setRefundType:(NSString*) value {
  _hasRefundType = YES;
  _refundType = value;
}
- (void) setGoodsStatus:(NSString*) value {
  _hasGoodsStatus = YES;
  _goodsStatus = value;
}
- (void) setRefundReason:(NSString*) value {
  _hasRefundReason = YES;
  _refundReason = value;
}
- (void) setRefundFee:(Float64) value {
  _hasRefundFee = YES;
  _refundFee = value;
}
- (void)setEvidentalImgsArray:(NSArray *)array {
  _evidentalImgs = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addEvidentalImgs:(NSString*)value {
  if (_evidentalImgs == nil) {
    _evidentalImgs = [[NSMutableArray alloc]init];
  }
  [_evidentalImgs addObject:value];
}
- (void) setRefundIntro:(NSString*) value {
  _hasRefundIntro = YES;
  _refundIntro = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
      case 26: {
        [self setRefundType:[input readString]];
        break;
      }
      case 34: {
        [self setGoodsStatus:[input readString]];
        break;
      }
      case 42: {
        [self setRefundReason:[input readString]];
        break;
      }
      case 49: {
        [self setRefundFee:[input readDouble]];
        break;
      }
      case 58: {
        [self addEvidentalImgs:[input readString]];
        break;
      }
      case 66: {
        [self setRefundIntro:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ApplyRefundResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ApplyRefundResult*) parseFromData:(NSData*) data {
  ApplyRefundResult* result = [[ApplyRefundResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetRefundFeeRequest

- (instancetype) init {
  if ((self = [super init])) {
    _userId = @"";
    _orderId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(2, self.orderId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetRefundFeeRequest*) parseFromData:(NSData*) data {
  GetRefundFeeRequest* result = [[GetRefundFeeRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetRefundFeeResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _maxRefundFee = 0;
    _transportFee = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasMaxRefundFee) {
    [output writeDouble:3 value:self.maxRefundFee];
  }
  if (self.hasTransportFee) {
    [output writeDouble:4 value:self.transportFee];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasMaxRefundFee) {
    size_ += computeDoubleSize(3, self.maxRefundFee);
  }
  if (self.hasTransportFee) {
    size_ += computeDoubleSize(4, self.transportFee);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetRefundFeeResult*) parseFromData:(NSData*) data {
  GetRefundFeeResult* result = [[GetRefundFeeResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasMaxRefundFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"maxRefundFee", [NSNumber numberWithDouble:self.maxRefundFee]];
  }
  if (self.hasTransportFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportFee", [NSNumber numberWithDouble:self.transportFee]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setMaxRefundFee:(Float64) value {
  _hasMaxRefundFee = YES;
  _maxRefundFee = value;
}
- (void) setTransportFee:(Float64) value {
  _hasTransportFee = YES;
  _transportFee = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 25: {
        [self setMaxRefundFee:[input readDouble]];
        break;
      }
      case 33: {
        [self setTransportFee:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation CommitRefundTransRequest

- (instancetype) init {
  if ((self = [super init])) {
    _userId = @"";
    _orderId = @"";
    _refundTransType = @"";
    _transportationId = @"";
    _transportationCompany = @"";
    _transportationIntro = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserId) {
    [output writeString:1 value:self.userId];
  }
  if (self.hasOrderId) {
    [output writeString:2 value:self.orderId];
  }
  if (self.hasRefundTransType) {
    [output writeString:3 value:self.refundTransType];
  }
  if (self.hasTransportationId) {
    [output writeString:4 value:self.transportationId];
  }
  if (self.hasTransportationCompany) {
    [output writeString:5 value:self.transportationCompany];
  }
  if (self.hasTransportationIntro) {
    [output writeString:6 value:self.transportationIntro];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasUserId) {
    size_ += computeStringSize(1, self.userId);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(2, self.orderId);
  }
  if (self.hasRefundTransType) {
    size_ += computeStringSize(3, self.refundTransType);
  }
  if (self.hasTransportationId) {
    size_ += computeStringSize(4, self.transportationId);
  }
  if (self.hasTransportationCompany) {
    size_ += computeStringSize(5, self.transportationCompany);
  }
  if (self.hasTransportationIntro) {
    size_ += computeStringSize(6, self.transportationIntro);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitRefundTransRequest*) parseFromData:(NSData*) data {
  CommitRefundTransRequest* result = [[CommitRefundTransRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasRefundTransType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"refundTransType", self.refundTransType];
  }
  if (self.hasTransportationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationId", self.transportationId];
  }
  if (self.hasTransportationCompany) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationCompany", self.transportationCompany];
  }
  if (self.hasTransportationIntro) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationIntro", self.transportationIntro];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setRefundTransType:(NSString*) value {
  _hasRefundTransType = YES;
  _refundTransType = value;
}
- (void) setTransportationId:(NSString*) value {
  _hasTransportationId = YES;
  _transportationId = value;
}
- (void) setTransportationCompany:(NSString*) value {
  _hasTransportationCompany = YES;
  _transportationCompany = value;
}
- (void) setTransportationIntro:(NSString*) value {
  _hasTransportationIntro = YES;
  _transportationIntro = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setUserId:[input readString]];
        break;
      }
      case 18: {
        [self setOrderId:[input readString]];
        break;
      }
      case 26: {
        [self setRefundTransType:[input readString]];
        break;
      }
      case 34: {
        [self setTransportationId:[input readString]];
        break;
      }
      case 42: {
        [self setTransportationCompany:[input readString]];
        break;
      }
      case 50: {
        [self setTransportationIntro:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation CommitRefundTransResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitRefundTransResult*) parseFromData:(NSData*) data {
  CommitRefundTransResult* result = [[CommitRefundTransResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetOrderDetailRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _userId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasUserId) {
    [output writeString:2 value:self.userId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(2, self.userId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetOrderDetailRequest*) parseFromData:(NSData*) data {
  GetOrderDetailRequest* result = [[GetOrderDetailRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 18: {
        [self setUserId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation GetOrderDetailResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderDetailInfo) {
    [output writeMessage:3 value:self.orderDetailInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderDetailInfo) {
    size_ += computeMessageSize(3, self.orderDetailInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (GetOrderDetailResult*) parseFromData:(NSData*) data {
  GetOrderDetailResult* result = [[GetOrderDetailResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderDetailInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderDetailInfo"];
    [self.orderDetailInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderDetailInfo:(OrderDetailInfo*) value {
  _hasOrderDetailInfo = YES;
  _orderDetailInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        OrderDetailInfo* sub = [[OrderDetailInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setOrderDetailInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation OrderDetailInfo

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _orderStatus = 0;
    _createTime = 0L;
    _rentStartTime = 0L;
    _rentEndTime = 0L;
    _rentDays = 0;
    _rentCount = 0;
    _rentPrice = 0;
    _pledgePrice = 0;
    _transportationPrice = 0;
    _totalPrice = 0;
    _transportationId = @"";
    _evaluateStauts = NO;
    _productId = @"";
    _mainImageUrl = @"";
    _desc = @"";
    _categoryName = @"";
    _payTime = 0L;
    _payId = @"";
    _payChannel = @"";
    _deliveryTime = 0L;
    _receiveTime = 0L;
    _revertTime = 0L;
    _completeTime = 0L;
    _closeTime = 0L;
    _discount = 0;
    _originalRentAmount = 0;
    _earnestAmount = 0;
    _remailAmount = 0;
    _qualityCode = @"";
    _qualityName = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasOrderStatus) {
    [output writeInt32:2 value:self.orderStatus];
  }
  if (self.hasCreateTime) {
    [output writeInt64:3 value:self.createTime];
  }
  if (self.hasRentStartTime) {
    [output writeInt64:4 value:self.rentStartTime];
  }
  if (self.hasRentEndTime) {
    [output writeInt64:5 value:self.rentEndTime];
  }
  if (self.hasRentDays) {
    [output writeInt32:6 value:self.rentDays];
  }
  if (self.hasRentCount) {
    [output writeInt32:7 value:self.rentCount];
  }
  if (self.hasRentPrice) {
    [output writeDouble:8 value:self.rentPrice];
  }
  if (self.hasPledgePrice) {
    [output writeDouble:9 value:self.pledgePrice];
  }
  if (self.hasTransportationPrice) {
    [output writeDouble:10 value:self.transportationPrice];
  }
  if (self.hasTotalPrice) {
    [output writeDouble:11 value:self.totalPrice];
  }
  if (self.hasTransportationId) {
    [output writeString:12 value:self.transportationId];
  }
  if (self.hasEvaluateStauts) {
    [output writeBool:13 value:self.evaluateStauts];
  }
  if (self.hasProductId) {
    [output writeString:14 value:self.productId];
  }
  if (self.hasMainImageUrl) {
    [output writeString:15 value:self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output writeString:16 value:self.desc];
  }
  if (self.hasCategoryName) {
    [output writeString:17 value:self.categoryName];
  }
  if (self.hasPayTime) {
    [output writeInt64:18 value:self.payTime];
  }
  if (self.hasPayId) {
    [output writeString:19 value:self.payId];
  }
  if (self.hasPayChannel) {
    [output writeString:20 value:self.payChannel];
  }
  if (self.hasDeliveryTime) {
    [output writeInt64:21 value:self.deliveryTime];
  }
  if (self.hasReceiveTime) {
    [output writeInt64:22 value:self.receiveTime];
  }
  if (self.hasRevertTime) {
    [output writeInt64:23 value:self.revertTime];
  }
  if (self.hasCompleteTime) {
    [output writeInt64:24 value:self.completeTime];
  }
  if (self.hasCloseTime) {
    [output writeInt64:25 value:self.closeTime];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:26 value:element];
  }];
  if (self.hasOrderReceiveAddressInfo) {
    [output writeMessage:27 value:self.orderReceiveAddressInfo];
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:28 value:element];
  }];
  if (self.hasDiscount) {
    [output writeDouble:29 value:self.discount];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:30 value:self.originalRentAmount];
  }
  if (self.hasEarnestAmount) {
    [output writeDouble:31 value:self.earnestAmount];
  }
  if (self.hasRemailAmount) {
    [output writeDouble:32 value:self.remailAmount];
  }
  if (self.hasQualityCode) {
    [output writeString:33 value:self.qualityCode];
  }
  if (self.hasQualityName) {
    [output writeString:34 value:self.qualityName];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasOrderStatus) {
    size_ += computeInt32Size(2, self.orderStatus);
  }
  if (self.hasCreateTime) {
    size_ += computeInt64Size(3, self.createTime);
  }
  if (self.hasRentStartTime) {
    size_ += computeInt64Size(4, self.rentStartTime);
  }
  if (self.hasRentEndTime) {
    size_ += computeInt64Size(5, self.rentEndTime);
  }
  if (self.hasRentDays) {
    size_ += computeInt32Size(6, self.rentDays);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(7, self.rentCount);
  }
  if (self.hasRentPrice) {
    size_ += computeDoubleSize(8, self.rentPrice);
  }
  if (self.hasPledgePrice) {
    size_ += computeDoubleSize(9, self.pledgePrice);
  }
  if (self.hasTransportationPrice) {
    size_ += computeDoubleSize(10, self.transportationPrice);
  }
  if (self.hasTotalPrice) {
    size_ += computeDoubleSize(11, self.totalPrice);
  }
  if (self.hasTransportationId) {
    size_ += computeStringSize(12, self.transportationId);
  }
  if (self.hasEvaluateStauts) {
    size_ += computeBoolSize(13, self.evaluateStauts);
  }
  if (self.hasProductId) {
    size_ += computeStringSize(14, self.productId);
  }
  if (self.hasMainImageUrl) {
    size_ += computeStringSize(15, self.mainImageUrl);
  }
  if (self.hasDesc) {
    size_ += computeStringSize(16, self.desc);
  }
  if (self.hasCategoryName) {
    size_ += computeStringSize(17, self.categoryName);
  }
  if (self.hasPayTime) {
    size_ += computeInt64Size(18, self.payTime);
  }
  if (self.hasPayId) {
    size_ += computeStringSize(19, self.payId);
  }
  if (self.hasPayChannel) {
    size_ += computeStringSize(20, self.payChannel);
  }
  if (self.hasDeliveryTime) {
    size_ += computeInt64Size(21, self.deliveryTime);
  }
  if (self.hasReceiveTime) {
    size_ += computeInt64Size(22, self.receiveTime);
  }
  if (self.hasRevertTime) {
    size_ += computeInt64Size(23, self.revertTime);
  }
  if (self.hasCompleteTime) {
    size_ += computeInt64Size(24, self.completeTime);
  }
  if (self.hasCloseTime) {
    size_ += computeInt64Size(25, self.closeTime);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.vouchers.count;
    [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(2 * count);
  }
  if (self.hasOrderReceiveAddressInfo) {
    size_ += computeMessageSize(27, self.orderReceiveAddressInfo);
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(28, element);
  }];
  if (self.hasDiscount) {
    size_ += computeDoubleSize(29, self.discount);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(30, self.originalRentAmount);
  }
  if (self.hasEarnestAmount) {
    size_ += computeDoubleSize(31, self.earnestAmount);
  }
  if (self.hasRemailAmount) {
    size_ += computeDoubleSize(32, self.remailAmount);
  }
  if (self.hasQualityCode) {
    size_ += computeStringSize(33, self.qualityCode);
  }
  if (self.hasQualityName) {
    size_ += computeStringSize(34, self.qualityName);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OrderDetailInfo*) parseFromData:(NSData*) data {
  OrderDetailInfo* result = [[OrderDetailInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasOrderStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderStatus", [NSNumber numberWithInteger:self.orderStatus]];
  }
  if (self.hasCreateTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"createTime", [NSNumber numberWithLongLong:self.createTime]];
  }
  if (self.hasRentStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentStartTime", [NSNumber numberWithLongLong:self.rentStartTime]];
  }
  if (self.hasRentEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentEndTime", [NSNumber numberWithLongLong:self.rentEndTime]];
  }
  if (self.hasRentDays) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentDays", [NSNumber numberWithInteger:self.rentDays]];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentPrice", [NSNumber numberWithDouble:self.rentPrice]];
  }
  if (self.hasPledgePrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgePrice", [NSNumber numberWithDouble:self.pledgePrice]];
  }
  if (self.hasTransportationPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationPrice", [NSNumber numberWithDouble:self.transportationPrice]];
  }
  if (self.hasTotalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalPrice", [NSNumber numberWithDouble:self.totalPrice]];
  }
  if (self.hasTransportationId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transportationId", self.transportationId];
  }
  if (self.hasEvaluateStauts) {
    [output appendFormat:@"%@%@: %@\n", indent, @"evaluateStauts", [NSNumber numberWithBool:self.evaluateStauts]];
  }
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasMainImageUrl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"mainImageUrl", self.mainImageUrl];
  }
  if (self.hasDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"desc", self.desc];
  }
  if (self.hasCategoryName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryName", self.categoryName];
  }
  if (self.hasPayTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payTime", [NSNumber numberWithLongLong:self.payTime]];
  }
  if (self.hasPayId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payId", self.payId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", self.payChannel];
  }
  if (self.hasDeliveryTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deliveryTime", [NSNumber numberWithLongLong:self.deliveryTime]];
  }
  if (self.hasReceiveTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"receiveTime", [NSNumber numberWithLongLong:self.receiveTime]];
  }
  if (self.hasRevertTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"revertTime", [NSNumber numberWithLongLong:self.revertTime]];
  }
  if (self.hasCompleteTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"completeTime", [NSNumber numberWithLongLong:self.completeTime]];
  }
  if (self.hasCloseTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"closeTime", [NSNumber numberWithLongLong:self.closeTime]];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vouchers", obj];
  }];
  if (self.hasOrderReceiveAddressInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderReceiveAddressInfo"];
    [self.orderReceiveAddressInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.voucherInfo enumerateObjectsUsingBlock:^(OrderVoucherInfo *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"voucherInfo"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasDiscount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"discount", [NSNumber numberWithDouble:self.discount]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  if (self.hasEarnestAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"earnestAmount", [NSNumber numberWithDouble:self.earnestAmount]];
  }
  if (self.hasRemailAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"remailAmount", [NSNumber numberWithDouble:self.remailAmount]];
  }
  if (self.hasQualityCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityCode", self.qualityCode];
  }
  if (self.hasQualityName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"qualityName", self.qualityName];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setOrderStatus:(SInt32) value {
  _hasOrderStatus = YES;
  _orderStatus = value;
}
- (void) setCreateTime:(SInt64) value {
  _hasCreateTime = YES;
  _createTime = value;
}
- (void) setRentStartTime:(SInt64) value {
  _hasRentStartTime = YES;
  _rentStartTime = value;
}
- (void) setRentEndTime:(SInt64) value {
  _hasRentEndTime = YES;
  _rentEndTime = value;
}
- (void) setRentDays:(SInt32) value {
  _hasRentDays = YES;
  _rentDays = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentPrice:(Float64) value {
  _hasRentPrice = YES;
  _rentPrice = value;
}
- (void) setPledgePrice:(Float64) value {
  _hasPledgePrice = YES;
  _pledgePrice = value;
}
- (void) setTransportationPrice:(Float64) value {
  _hasTransportationPrice = YES;
  _transportationPrice = value;
}
- (void) setTotalPrice:(Float64) value {
  _hasTotalPrice = YES;
  _totalPrice = value;
}
- (void) setTransportationId:(NSString*) value {
  _hasTransportationId = YES;
  _transportationId = value;
}
- (void) setEvaluateStauts:(BOOL) value {
  _hasEvaluateStauts = YES;
  _evaluateStauts = value;
}
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setMainImageUrl:(NSString*) value {
  _hasMainImageUrl = YES;
  _mainImageUrl = value;
}
- (void) setDesc:(NSString*) value {
  _hasDesc = YES;
  _desc = value;
}
- (void) setCategoryName:(NSString*) value {
  _hasCategoryName = YES;
  _categoryName = value;
}
- (void) setPayTime:(SInt64) value {
  _hasPayTime = YES;
  _payTime = value;
}
- (void) setPayId:(NSString*) value {
  _hasPayId = YES;
  _payId = value;
}
- (void) setPayChannel:(NSString*) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setDeliveryTime:(SInt64) value {
  _hasDeliveryTime = YES;
  _deliveryTime = value;
}
- (void) setReceiveTime:(SInt64) value {
  _hasReceiveTime = YES;
  _receiveTime = value;
}
- (void) setRevertTime:(SInt64) value {
  _hasRevertTime = YES;
  _revertTime = value;
}
- (void) setCompleteTime:(SInt64) value {
  _hasCompleteTime = YES;
  _completeTime = value;
}
- (void) setCloseTime:(SInt64) value {
  _hasCloseTime = YES;
  _closeTime = value;
}
- (void)setVouchersArray:(NSArray *)array {
  _vouchers = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addVouchers:(NSString*)value {
  if (_vouchers == nil) {
    _vouchers = [[NSMutableArray alloc]init];
  }
  [_vouchers addObject:value];
}
- (void) setOrderReceiveAddressInfo:(OrderReceiveAddressInfo*) value {
  _hasOrderReceiveAddressInfo = YES;
  _orderReceiveAddressInfo = value;
}
- (void)setVoucherInfoArray:(NSArray *)array {
  _voucherInfo = [[NSMutableArray alloc]initWithArray:array];
}
- (void)addVoucherInfo:(OrderVoucherInfo*)value {
  if (_voucherInfo == nil) {
    _voucherInfo = [[NSMutableArray alloc]init];
  }
  [_voucherInfo addObject:value];
}
- (void) setDiscount:(Float64) value {
  _hasDiscount = YES;
  _discount = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) setEarnestAmount:(Float64) value {
  _hasEarnestAmount = YES;
  _earnestAmount = value;
}
- (void) setRemailAmount:(Float64) value {
  _hasRemailAmount = YES;
  _remailAmount = value;
}
- (void) setQualityCode:(NSString*) value {
  _hasQualityCode = YES;
  _qualityCode = value;
}
- (void) setQualityName:(NSString*) value {
  _hasQualityName = YES;
  _qualityName = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 16: {
        [self setOrderStatus:[input readInt32]];
        break;
      }
      case 24: {
        [self setCreateTime:[input readInt64]];
        break;
      }
      case 32: {
        [self setRentStartTime:[input readInt64]];
        break;
      }
      case 40: {
        [self setRentEndTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setRentDays:[input readInt32]];
        break;
      }
      case 56: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 65: {
        [self setRentPrice:[input readDouble]];
        break;
      }
      case 73: {
        [self setPledgePrice:[input readDouble]];
        break;
      }
      case 81: {
        [self setTransportationPrice:[input readDouble]];
        break;
      }
      case 89: {
        [self setTotalPrice:[input readDouble]];
        break;
      }
      case 98: {
        [self setTransportationId:[input readString]];
        break;
      }
      case 104: {
        [self setEvaluateStauts:[input readBool]];
        break;
      }
      case 114: {
        [self setProductId:[input readString]];
        break;
      }
      case 122: {
        [self setMainImageUrl:[input readString]];
        break;
      }
      case 130: {
        [self setDesc:[input readString]];
        break;
      }
      case 138: {
        [self setCategoryName:[input readString]];
        break;
      }
      case 144: {
        [self setPayTime:[input readInt64]];
        break;
      }
      case 154: {
        [self setPayId:[input readString]];
        break;
      }
      case 162: {
        [self setPayChannel:[input readString]];
        break;
      }
      case 168: {
        [self setDeliveryTime:[input readInt64]];
        break;
      }
      case 176: {
        [self setReceiveTime:[input readInt64]];
        break;
      }
      case 184: {
        [self setRevertTime:[input readInt64]];
        break;
      }
      case 192: {
        [self setCompleteTime:[input readInt64]];
        break;
      }
      case 200: {
        [self setCloseTime:[input readInt64]];
        break;
      }
      case 210: {
        [self addVouchers:[input readString]];
        break;
      }
      case 218: {
        OrderReceiveAddressInfo* sub = [[OrderReceiveAddressInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setOrderReceiveAddressInfo:sub];
        break;
      }
      case 226: {
        OrderVoucherInfo* sub = [[OrderVoucherInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self addVoucherInfo:sub];
        break;
      }
      case 233: {
        [self setDiscount:[input readDouble]];
        break;
      }
      case 241: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
      case 249: {
        [self setEarnestAmount:[input readDouble]];
        break;
      }
      case 257: {
        [self setRemailAmount:[input readDouble]];
        break;
      }
      case 266: {
        [self setQualityCode:[input readString]];
        break;
      }
      case 274: {
        [self setQualityName:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation OrderVoucherInfo

- (instancetype) init {
  if ((self = [super init])) {
    _voucherId = @"";
    _voucherTitle = @"";
    _voucherType = @"";
    _voucherStatus = @"";
    _validStartTime = 0L;
    _validEndTime = 0L;
    _voucherDesc = @"";
    _deductAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasVoucherId) {
    [output writeString:1 value:self.voucherId];
  }
  if (self.hasVoucherTitle) {
    [output writeString:2 value:self.voucherTitle];
  }
  if (self.hasVoucherType) {
    [output writeString:3 value:self.voucherType];
  }
  if (self.hasVoucherStatus) {
    [output writeString:4 value:self.voucherStatus];
  }
  if (self.hasValidStartTime) {
    [output writeInt64:5 value:self.validStartTime];
  }
  if (self.hasValidEndTime) {
    [output writeInt64:6 value:self.validEndTime];
  }
  if (self.hasVoucherDesc) {
    [output writeString:7 value:self.voucherDesc];
  }
  if (self.hasDeductAmount) {
    [output writeDouble:8 value:self.deductAmount];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasVoucherId) {
    size_ += computeStringSize(1, self.voucherId);
  }
  if (self.hasVoucherTitle) {
    size_ += computeStringSize(2, self.voucherTitle);
  }
  if (self.hasVoucherType) {
    size_ += computeStringSize(3, self.voucherType);
  }
  if (self.hasVoucherStatus) {
    size_ += computeStringSize(4, self.voucherStatus);
  }
  if (self.hasValidStartTime) {
    size_ += computeInt64Size(5, self.validStartTime);
  }
  if (self.hasValidEndTime) {
    size_ += computeInt64Size(6, self.validEndTime);
  }
  if (self.hasVoucherDesc) {
    size_ += computeStringSize(7, self.voucherDesc);
  }
  if (self.hasDeductAmount) {
    size_ += computeDoubleSize(8, self.deductAmount);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (OrderVoucherInfo*) parseFromData:(NSData*) data {
  OrderVoucherInfo* result = [[OrderVoucherInfo alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasVoucherId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherId", self.voucherId];
  }
  if (self.hasVoucherTitle) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherTitle", self.voucherTitle];
  }
  if (self.hasVoucherType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherType", self.voucherType];
  }
  if (self.hasVoucherStatus) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherStatus", self.voucherStatus];
  }
  if (self.hasValidStartTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validStartTime", [NSNumber numberWithLongLong:self.validStartTime]];
  }
  if (self.hasValidEndTime) {
    [output appendFormat:@"%@%@: %@\n", indent, @"validEndTime", [NSNumber numberWithLongLong:self.validEndTime]];
  }
  if (self.hasVoucherDesc) {
    [output appendFormat:@"%@%@: %@\n", indent, @"voucherDesc", self.voucherDesc];
  }
  if (self.hasDeductAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"deductAmount", [NSNumber numberWithDouble:self.deductAmount]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setVoucherId:(NSString*) value {
  _hasVoucherId = YES;
  _voucherId = value;
}
- (void) setVoucherTitle:(NSString*) value {
  _hasVoucherTitle = YES;
  _voucherTitle = value;
}
- (void) setVoucherType:(NSString*) value {
  _hasVoucherType = YES;
  _voucherType = value;
}
- (void) setVoucherStatus:(NSString*) value {
  _hasVoucherStatus = YES;
  _voucherStatus = value;
}
- (void) setValidStartTime:(SInt64) value {
  _hasValidStartTime = YES;
  _validStartTime = value;
}
- (void) setValidEndTime:(SInt64) value {
  _hasValidEndTime = YES;
  _validEndTime = value;
}
- (void) setVoucherDesc:(NSString*) value {
  _hasVoucherDesc = YES;
  _voucherDesc = value;
}
- (void) setDeductAmount:(Float64) value {
  _hasDeductAmount = YES;
  _deductAmount = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setVoucherId:[input readString]];
        break;
      }
      case 18: {
        [self setVoucherTitle:[input readString]];
        break;
      }
      case 26: {
        [self setVoucherType:[input readString]];
        break;
      }
      case 34: {
        [self setVoucherStatus:[input readString]];
        break;
      }
      case 40: {
        [self setValidStartTime:[input readInt64]];
        break;
      }
      case 48: {
        [self setValidEndTime:[input readInt64]];
        break;
      }
      case 58: {
        [self setVoucherDesc:[input readString]];
        break;
      }
      case 65: {
        [self setDeductAmount:[input readDouble]];
        break;
      }
    }
  }
}
@end


@implementation CommitEarnestRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _orderId = @"";
    _onlyCalPrice = NO;
    _userId = @"";
    _insurance = NO;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasCategoryCode) {
    [output writeString:2 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:3 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:4 value:self.rentCode];
  }
  if (self.hasOrderId) {
    [output writeString:5 value:self.orderId];
  }
  if (self.hasOnlyCalPrice) {
    [output writeBool:6 value:self.onlyCalPrice];
  }
  if (self.hasUserId) {
    [output writeString:7 value:self.userId];
  }
  if (self.hasInsurance) {
    [output writeBool:8 value:self.insurance];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(2, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(3, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(4, self.rentCode);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(5, self.orderId);
  }
  if (self.hasOnlyCalPrice) {
    size_ += computeBoolSize(6, self.onlyCalPrice);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(7, self.userId);
  }
  if (self.hasInsurance) {
    size_ += computeBoolSize(8, self.insurance);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitEarnestRequest*) parseFromData:(NSData*) data {
  CommitEarnestRequest* result = [[CommitEarnestRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasOnlyCalPrice) {
    [output appendFormat:@"%@%@: %@\n", indent, @"onlyCalPrice", [NSNumber numberWithBool:self.onlyCalPrice]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasInsurance) {
    [output appendFormat:@"%@%@: %@\n", indent, @"insurance", [NSNumber numberWithBool:self.insurance]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setOnlyCalPrice:(BOOL) value {
  _hasOnlyCalPrice = YES;
  _onlyCalPrice = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setInsurance:(BOOL) value {
  _hasInsurance = YES;
  _insurance = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 24: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 34: {
        [self setRentCode:[input readString]];
        break;
      }
      case 42: {
        [self setOrderId:[input readString]];
        break;
      }
      case 48: {
        [self setOnlyCalPrice:[input readBool]];
        break;
      }
      case 58: {
        [self setUserId:[input readString]];
        break;
      }
      case 64: {
        [self setInsurance:[input readBool]];
        break;
      }
    }
  }
}
@end


@implementation CommitEarnestResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _pledgeAmount = 0;
    _totalRentAmount = 0;
    _originalRentAmount = 0;
    _transFee = 0;
    _totalAmount = 0;
    _earnestAmount = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasCategoryCode) {
    [output writeString:4 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:5 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:6 value:self.rentCode];
  }
  if (self.hasPledgeAmount) {
    [output writeDouble:7 value:self.pledgeAmount];
  }
  if (self.hasTotalRentAmount) {
    [output writeDouble:8 value:self.totalRentAmount];
  }
  if (self.hasOriginalRentAmount) {
    [output writeDouble:9 value:self.originalRentAmount];
  }
  if (self.hasTransFee) {
    [output writeDouble:10 value:self.transFee];
  }
  if (self.hasTotalAmount) {
    [output writeDouble:11 value:self.totalAmount];
  }
  if (self.hasEarnestAmount) {
    [output writeDouble:12 value:self.earnestAmount];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output writeMessage:13 value:self.orderReceiveAddressInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(4, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(5, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(6, self.rentCode);
  }
  if (self.hasPledgeAmount) {
    size_ += computeDoubleSize(7, self.pledgeAmount);
  }
  if (self.hasTotalRentAmount) {
    size_ += computeDoubleSize(8, self.totalRentAmount);
  }
  if (self.hasOriginalRentAmount) {
    size_ += computeDoubleSize(9, self.originalRentAmount);
  }
  if (self.hasTransFee) {
    size_ += computeDoubleSize(10, self.transFee);
  }
  if (self.hasTotalAmount) {
    size_ += computeDoubleSize(11, self.totalAmount);
  }
  if (self.hasEarnestAmount) {
    size_ += computeDoubleSize(12, self.earnestAmount);
  }
  if (self.hasOrderReceiveAddressInfo) {
    size_ += computeMessageSize(13, self.orderReceiveAddressInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CommitEarnestResult*) parseFromData:(NSData*) data {
  CommitEarnestResult* result = [[CommitEarnestResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasPledgeAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pledgeAmount", [NSNumber numberWithDouble:self.pledgeAmount]];
  }
  if (self.hasTotalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalRentAmount", [NSNumber numberWithDouble:self.totalRentAmount]];
  }
  if (self.hasOriginalRentAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"originalRentAmount", [NSNumber numberWithDouble:self.originalRentAmount]];
  }
  if (self.hasTransFee) {
    [output appendFormat:@"%@%@: %@\n", indent, @"transFee", [NSNumber numberWithDouble:self.transFee]];
  }
  if (self.hasTotalAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"totalAmount", [NSNumber numberWithDouble:self.totalAmount]];
  }
  if (self.hasEarnestAmount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"earnestAmount", [NSNumber numberWithDouble:self.earnestAmount]];
  }
  if (self.hasOrderReceiveAddressInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"orderReceiveAddressInfo"];
    [self.orderReceiveAddressInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setPledgeAmount:(Float64) value {
  _hasPledgeAmount = YES;
  _pledgeAmount = value;
}
- (void) setTotalRentAmount:(Float64) value {
  _hasTotalRentAmount = YES;
  _totalRentAmount = value;
}
- (void) setOriginalRentAmount:(Float64) value {
  _hasOriginalRentAmount = YES;
  _originalRentAmount = value;
}
- (void) setTransFee:(Float64) value {
  _hasTransFee = YES;
  _transFee = value;
}
- (void) setTotalAmount:(Float64) value {
  _hasTotalAmount = YES;
  _totalAmount = value;
}
- (void) setEarnestAmount:(Float64) value {
  _hasEarnestAmount = YES;
  _earnestAmount = value;
}
- (void) setOrderReceiveAddressInfo:(OrderReceiveAddressInfo*) value {
  _hasOrderReceiveAddressInfo = YES;
  _orderReceiveAddressInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 34: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 40: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 50: {
        [self setRentCode:[input readString]];
        break;
      }
      case 57: {
        [self setPledgeAmount:[input readDouble]];
        break;
      }
      case 65: {
        [self setTotalRentAmount:[input readDouble]];
        break;
      }
      case 73: {
        [self setOriginalRentAmount:[input readDouble]];
        break;
      }
      case 81: {
        [self setTransFee:[input readDouble]];
        break;
      }
      case 89: {
        [self setTotalAmount:[input readDouble]];
        break;
      }
      case 97: {
        [self setEarnestAmount:[input readDouble]];
        break;
      }
      case 106: {
        OrderReceiveAddressInfo* sub = [[OrderReceiveAddressInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setOrderReceiveAddressInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ConfirmEarnestRequest

- (instancetype) init {
  if ((self = [super init])) {
    _productId = @"";
    _categoryCode = @"";
    _rentCount = 0;
    _rentCode = @"";
    _payChannel = 0;
    _userId = @"";
    _addressId = @"";
    _orderId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasProductId) {
    [output writeString:1 value:self.productId];
  }
  if (self.hasCategoryCode) {
    [output writeString:2 value:self.categoryCode];
  }
  if (self.hasRentCount) {
    [output writeInt32:3 value:self.rentCount];
  }
  if (self.hasRentCode) {
    [output writeString:4 value:self.rentCode];
  }
  if (self.hasPayChannel) {
    [output writeInt32:5 value:self.payChannel];
  }
  if (self.hasUserId) {
    [output writeString:6 value:self.userId];
  }
  if (self.hasAddressId) {
    [output writeString:7 value:self.addressId];
  }
  if (self.hasOrderId) {
    [output writeString:8 value:self.orderId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasProductId) {
    size_ += computeStringSize(1, self.productId);
  }
  if (self.hasCategoryCode) {
    size_ += computeStringSize(2, self.categoryCode);
  }
  if (self.hasRentCount) {
    size_ += computeInt32Size(3, self.rentCount);
  }
  if (self.hasRentCode) {
    size_ += computeStringSize(4, self.rentCode);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(5, self.payChannel);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(6, self.userId);
  }
  if (self.hasAddressId) {
    size_ += computeStringSize(7, self.addressId);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(8, self.orderId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmEarnestRequest*) parseFromData:(NSData*) data {
  ConfirmEarnestRequest* result = [[ConfirmEarnestRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasProductId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"productId", self.productId];
  }
  if (self.hasCategoryCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"categoryCode", self.categoryCode];
  }
  if (self.hasRentCount) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCount", [NSNumber numberWithInteger:self.rentCount]];
  }
  if (self.hasRentCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"rentCode", self.rentCode];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  if (self.hasAddressId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addressId", self.addressId];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setProductId:(NSString*) value {
  _hasProductId = YES;
  _productId = value;
}
- (void) setCategoryCode:(NSString*) value {
  _hasCategoryCode = YES;
  _categoryCode = value;
}
- (void) setRentCount:(SInt32) value {
  _hasRentCount = YES;
  _rentCount = value;
}
- (void) setRentCode:(NSString*) value {
  _hasRentCode = YES;
  _rentCode = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void) setAddressId:(NSString*) value {
  _hasAddressId = YES;
  _addressId = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setProductId:[input readString]];
        break;
      }
      case 18: {
        [self setCategoryCode:[input readString]];
        break;
      }
      case 24: {
        [self setRentCount:[input readInt32]];
        break;
      }
      case 34: {
        [self setRentCode:[input readString]];
        break;
      }
      case 40: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 50: {
        [self setUserId:[input readString]];
        break;
      }
      case 58: {
        [self setAddressId:[input readString]];
        break;
      }
      case 66: {
        [self setOrderId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmEarnestResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _payChannel = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:4 value:self.payChannel];
  }
  if (self.hasWxPayInfo) {
    [output writeMessage:5 value:self.wxPayInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(4, self.payChannel);
  }
  if (self.hasWxPayInfo) {
    size_ += computeMessageSize(5, self.wxPayInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmEarnestResult*) parseFromData:(NSData*) data {
  ConfirmEarnestResult* result = [[ConfirmEarnestResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasWxPayInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"wxPayInfo"];
    [self.wxPayInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setWxPayInfo:(WxPayInfo*) value {
  _hasWxPayInfo = YES;
  _wxPayInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 32: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 42: {
        WxPayInfo* sub = [[WxPayInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setWxPayInfo:sub];
        break;
      }
    }
  }
}
@end


@implementation ConfirmPayRemainRequest

- (instancetype) init {
  if ((self = [super init])) {
    _orderId = @"";
    _payChannel = 0;
    _userId = @"";
    _addressId = @"";
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasOrderId) {
    [output writeString:1 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:2 value:self.payChannel];
  }
  if (self.hasUserId) {
    [output writeString:3 value:self.userId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
    [output writeString:4 value:element];
  }];
  if (self.hasAddressId) {
    [output writeString:5 value:self.addressId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasOrderId) {
    size_ += computeStringSize(1, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(2, self.payChannel);
  }
  if (self.hasUserId) {
    size_ += computeStringSize(3, self.userId);
  }
  {
    __block SInt32 dataSize = 0;
    const NSUInteger count = self.vouchers.count;
    [self.vouchers enumerateObjectsUsingBlock:^(NSString *element, NSUInteger idx, BOOL *stop) {
      dataSize += computeStringSizeNoTag(element);
    }];
    size_ += dataSize;
    size_ += (SInt32)(1 * count);
  }
  if (self.hasAddressId) {
    size_ += computeStringSize(5, self.addressId);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmPayRemainRequest*) parseFromData:(NSData*) data {
  ConfirmPayRemainRequest* result = [[ConfirmPayRemainRequest alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasUserId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"userId", self.userId];
  }
  [self.vouchers enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@: %@\n", indent, @"vouchers", obj];
  }];
  if (self.hasAddressId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"addressId", self.addressId];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setUserId:(NSString*) value {
  _hasUserId = YES;
  _userId = value;
}
- (void)setVouchersArray:(NSArray *)array {
  _vouchers = [[NSMutableArray alloc] initWithArray:array];
}
- (void)addVouchers:(NSString*)value {
  if (_vouchers == nil) {
    _vouchers = [[NSMutableArray alloc]init];
  }
  [_vouchers addObject:value];
}
- (void) setAddressId:(NSString*) value {
  _hasAddressId = YES;
  _addressId = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setOrderId:[input readString]];
        break;
      }
      case 16: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 26: {
        [self setUserId:[input readString]];
        break;
      }
      case 34: {
        [self addVouchers:[input readString]];
        break;
      }
      case 42: {
        [self setAddressId:[input readString]];
        break;
      }
    }
  }
}
@end


@implementation ConfirmPayRemainResult

- (instancetype) init {
  if ((self = [super init])) {
    _resultCode = @"";
    _resultMsg = @"";
    _orderId = @"";
    _payChannel = 0;
  }
  return self;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasResultCode) {
    [output writeString:1 value:self.resultCode];
  }
  if (self.hasResultMsg) {
    [output writeString:2 value:self.resultMsg];
  }
  if (self.hasOrderId) {
    [output writeString:3 value:self.orderId];
  }
  if (self.hasPayChannel) {
    [output writeInt32:4 value:self.payChannel];
  }
  if (self.hasWxPayInfo) {
    [output writeMessage:5 value:self.wxPayInfo];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;

  size_ = 0;
  if (self.hasResultCode) {
    size_ += computeStringSize(1, self.resultCode);
  }
  if (self.hasResultMsg) {
    size_ += computeStringSize(2, self.resultMsg);
  }
  if (self.hasOrderId) {
    size_ += computeStringSize(3, self.orderId);
  }
  if (self.hasPayChannel) {
    size_ += computeInt32Size(4, self.payChannel);
  }
  if (self.hasWxPayInfo) {
    size_ += computeMessageSize(5, self.wxPayInfo);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (ConfirmPayRemainResult*) parseFromData:(NSData*) data {
  ConfirmPayRemainResult* result = [[ConfirmPayRemainResult alloc] init];
  [result mergeFromData:data];  return result;
}
#ifdef DEBUG
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultCode", self.resultCode];
  }
  if (self.hasResultMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"resultMsg", self.resultMsg];
  }
  if (self.hasOrderId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"orderId", self.orderId];
  }
  if (self.hasPayChannel) {
    [output appendFormat:@"%@%@: %@\n", indent, @"payChannel", [NSNumber numberWithInteger:self.payChannel]];
  }
  if (self.hasWxPayInfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"wxPayInfo"];
    [self.wxPayInfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
#endif
- (void) setResultCode:(NSString*) value {
  _hasResultCode = YES;
  _resultCode = value;
}
- (void) setResultMsg:(NSString*) value {
  _hasResultMsg = YES;
  _resultMsg = value;
}
- (void) setOrderId:(NSString*) value {
  _hasOrderId = YES;
  _orderId = value;
}
- (void) setPayChannel:(SInt32) value {
  _hasPayChannel = YES;
  _payChannel = value;
}
- (void) setWxPayInfo:(WxPayInfo*) value {
  _hasWxPayInfo = YES;
  _wxPayInfo = value;
}
- (void) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields_ = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields_ build]];
        return ;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields_ extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields_ build]];
          return ;
        }
        break;
      }
      case 10: {
        [self setResultCode:[input readString]];
        break;
      }
      case 18: {
        [self setResultMsg:[input readString]];
        break;
      }
      case 26: {
        [self setOrderId:[input readString]];
        break;
      }
      case 32: {
        [self setPayChannel:[input readInt32]];
        break;
      }
      case 42: {
        WxPayInfo* sub = [[WxPayInfo alloc] init];
        [input readQJMessage:sub extensionRegistry:extensionRegistry];
        [self setWxPayInfo:sub];
        break;
      }
    }
  }
}
@end


