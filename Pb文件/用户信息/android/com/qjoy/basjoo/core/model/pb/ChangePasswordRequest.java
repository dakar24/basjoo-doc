// Code generated by Wire-Lite protocol buffer compiler, do not edit.
// Source file: ///home/admin/protobuf/src/26f4e4b315d9e8ccf4f3bb9734d210cf/proto/User
package com.qjoy.basjoo.core.model.pb;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * 修改密码请求
 */
public final class ChangePasswordRequest extends Message {

  public static final int TAG_OLDPASSWORD = 1;
  public static final int TAG_NEWPASSWORD = 2;
  public static final int TAG_CONFIRMPASSWORD = 3;

  public static final String DEFAULT_OLDPASSWORD = "";
  public static final String DEFAULT_NEWPASSWORD = "";
  public static final String DEFAULT_CONFIRMPASSWORD = "";

  /**
   * 旧密码
   */
  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public String oldPassword;

  /**
   * 新密码
   */
  @ProtoField(tag = 2, type = STRING, label = REQUIRED)
  public String newPassword;

  /**
   * 确认密码
   */
  @ProtoField(tag = 3, type = STRING, label = REQUIRED)
  public String confirmPassword;

  public ChangePasswordRequest(ChangePasswordRequest message) {
    super(message);
    if (message == null) return;
    this.oldPassword = message.oldPassword;
    this.newPassword = message.newPassword;
    this.confirmPassword = message.confirmPassword;
  }

  public ChangePasswordRequest() {
  }

  public ChangePasswordRequest fillTagValue(int tag, Object value) {
    switch(tag) {
        case TAG_OLDPASSWORD:
        this.oldPassword = (String)value;
        break;
        case TAG_NEWPASSWORD:
        this.newPassword = (String)value;
        break;
        case TAG_CONFIRMPASSWORD:
        this.confirmPassword = (String)value;
        break;
        default: break;
        };
    return this;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ChangePasswordRequest)) return false;
    ChangePasswordRequest o = (ChangePasswordRequest) other;
    return equals(oldPassword, o.oldPassword)
        && equals(newPassword, o.newPassword)
        && equals(confirmPassword, o.confirmPassword);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = oldPassword != null ? oldPassword.hashCode() : 0;
      result = result * 37 + (newPassword != null ? newPassword.hashCode() : 0);
      result = result * 37 + (confirmPassword != null ? confirmPassword.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }
}
